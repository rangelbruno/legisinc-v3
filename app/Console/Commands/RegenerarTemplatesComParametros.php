<?php

namespace App\Console\Commands;

use App\Models\TipoProposicao;
use App\Models\TipoProposicaoTemplate;
use App\Services\Template\TemplateParametrosService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Storage;

class RegenerarTemplatesComParametros extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'templates:regenerar-com-parametros {--force : For√ßar regenera√ß√£o mesmo se j√° existir}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Regenera todos os templates incluindo os par√¢metros de cabe√ßalho, rodap√©, vari√°veis din√¢micas e dados da c√¢mara';

    private TemplateParametrosService $parametrosService;

    public function __construct(TemplateParametrosService $parametrosService)
    {
        parent::__construct();
        $this->parametrosService = $parametrosService;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîÑ Iniciando regenera√ß√£o de templates com todos os par√¢metros...');
        
        // Obter todos os par√¢metros configurados
        $parametros = $this->parametrosService->obterParametrosTemplates();
        $this->info('üìã Par√¢metros carregados: ' . count($parametros) . ' configura√ß√µes');
        
        // Listar par√¢metros por categoria
        $this->table(
            ['Categoria', 'Total de Par√¢metros'],
            [
                ['Cabe√ßalho', $this->contarParametrosPorCategoria($parametros, 'Cabe√ßalho')],
                ['Rodap√©', $this->contarParametrosPorCategoria($parametros, 'Rodap√©')],
                ['Vari√°veis Din√¢micas', $this->contarParametrosPorCategoria($parametros, 'Vari√°veis Din√¢micas')],
                ['Formata√ß√£o', $this->contarParametrosPorCategoria($parametros, 'Formata√ß√£o')],
                ['Dados Gerais da C√¢mara', $this->contarParametrosPorCategoria($parametros, 'Dados Gerais da C√¢mara')],
            ]
        );

        // Obter todos os tipos de proposi√ß√£o ativos
        $tipos = TipoProposicao::where('ativo', true)->get();
        $this->info('üìù Tipos de proposi√ß√£o encontrados: ' . $tipos->count());

        $templatesRegenerados = 0;
        $templatesCriados = 0;

        foreach ($tipos as $tipo) {
            $this->info("\nüî® Processando: {$tipo->nome}");
            
            // Verificar se j√° existe template
            $template = TipoProposicaoTemplate::firstOrNew(['tipo_proposicao_id' => $tipo->id]);
            
            $novoTemplate = !$template->exists;
            
            if (!$novoTemplate && !$this->option('force')) {
                $this->warn("  ‚ö†Ô∏è  Template j√° existe. Use --force para regenerar.");
                continue;
            }

            // Gerar conte√∫do do template
            $conteudoTemplate = $this->gerarConteudoTemplate($tipo, $parametros);
            
            // Converter para RTF
            $conteudoRTF = $this->converterParaRTF($conteudoTemplate, $parametros);
            
            // Salvar arquivo
            $nomeArquivo = 'template_' . $tipo->codigo . '_parametrizado.rtf';
            $caminhoArquivo = 'templates/' . $nomeArquivo;
            
            Storage::put($caminhoArquivo, $conteudoRTF);
            
            // Atualizar registro do template
            $template->document_key = 'template_' . $tipo->id . '_' . time() . '_' . uniqid();
            $template->arquivo_path = $caminhoArquivo;
            $template->ativo = true;
            $template->updated_by = null;
            $template->save();
            
            if ($novoTemplate) {
                $templatesCriados++;
                $this->info("  ‚úÖ Template criado: {$caminhoArquivo}");
            } else {
                $templatesRegenerados++;
                $this->info("  ‚úÖ Template regenerado: {$caminhoArquivo}");
            }
        }

        $this->newLine();
        $this->info('üéâ Regenera√ß√£o conclu√≠da!');
        $this->table(
            ['Resultado', 'Total'],
            [
                ['Templates criados', $templatesCriados],
                ['Templates regenerados', $templatesRegenerados],
                ['Total processado', $templatesCriados + $templatesRegenerados],
            ]
        );

        return Command::SUCCESS;
    }

    /**
     * Contar par√¢metros por categoria
     */
    private function contarParametrosPorCategoria(array $parametros, string $categoria): int
    {
        $count = 0;
        foreach ($parametros as $chave => $valor) {
            if (str_starts_with($chave, $categoria . '.')) {
                $count++;
            }
        }
        return $count;
    }

    /**
     * Gerar conte√∫do do template com todos os par√¢metros
     */
    private function gerarConteudoTemplate(TipoProposicao $tipo, array $parametros): string
    {
        $conteudo = "";
        
        // CABE√áALHO COMPLETO
        $conteudo .= $this->gerarCabecalho($parametros);
        
        // IDENTIFICA√á√ÉO DO DOCUMENTO
        $conteudo .= "\n\n";
        $conteudo .= strtoupper($tipo->nome) . " N¬∫ \${numero_proposicao}/\${ano}\n";
        $conteudo .= str_repeat("=", 60) . "\n\n";
        
        // EMENTA
        $conteudo .= "EMENTA: \${ementa}\n\n";
        $conteudo .= str_repeat("-", 60) . "\n\n";
        
        // CORPO DO DOCUMENTO
        $conteudo .= $this->gerarCorpoPorTipo($tipo);
        
        // JUSTIFICATIVA (se aplic√°vel)
        if ($this->tipoRequerJustificativa($tipo)) {
            $conteudo .= "\n\nJUSTIFICATIVA\n";
            $conteudo .= str_repeat("-", 30) . "\n\n";
            $conteudo .= "\${justificativa}\n\n";
        }
        
        // √ÅREA DE ASSINATURA
        $conteudo .= "\n\n";
        $conteudo .= $parametros['Vari√°veis Din√¢micas.var_assinatura_padrao'] ?? 
                     "Sala das Sess√µes, em \${data_atual}.\n\n\n_________________________________\n\${autor_nome}\n\${autor_cargo}";
        
        // RODAP√â COMPLETO
        $conteudo .= $this->gerarRodape($parametros);
        
        return $conteudo;
    }

    /**
     * Gerar cabe√ßalho com todos os par√¢metros
     */
    private function gerarCabecalho(array $parametros): string
    {
        $cabecalho = "";
        
        // Imagem do cabe√ßalho (placeholder para RTF)
        if (!empty($parametros['Cabe√ßalho.cabecalho_imagem'])) {
            $cabecalho .= "[IMAGEM: \${cabecalho_imagem}]\n\n";
        }
        
        // Nome da c√¢mara
        $cabecalho .= $parametros['Cabe√ßalho.cabecalho_nome_camara'] ?? 'C√ÇMARA MUNICIPAL';
        $cabecalho .= "\n";
        
        // CNPJ se dispon√≠vel
        if (!empty($parametros['Dados Gerais da C√¢mara.cnpj'])) {
            $cabecalho .= "CNPJ: " . $parametros['Dados Gerais da C√¢mara.cnpj'] . "\n";
        }
        
        // Endere√ßo
        if (!empty($parametros['Cabe√ßalho.cabecalho_endereco'])) {
            $cabecalho .= $parametros['Cabe√ßalho.cabecalho_endereco'] . "\n";
        } else if (!empty($parametros['Dados Gerais da C√¢mara.endereco_logradouro'])) {
            $cabecalho .= $parametros['Dados Gerais da C√¢mara.endereco_logradouro'];
            if (!empty($parametros['Dados Gerais da C√¢mara.endereco_bairro'])) {
                $cabecalho .= ", " . $parametros['Dados Gerais da C√¢mara.endereco_bairro'];
            }
            if (!empty($parametros['Dados Gerais da C√¢mara.endereco_cep'])) {
                $cabecalho .= " - CEP: " . $parametros['Dados Gerais da C√¢mara.endereco_cep'];
            }
            $cabecalho .= "\n";
        }
        
        // Munic√≠pio/UF
        $municipio = $parametros['Dados Gerais da C√¢mara.municipio_nome'] ?? 'S√£o Paulo';
        $uf = $parametros['Dados Gerais da C√¢mara.municipio_uf'] ?? 'SP';
        $cabecalho .= "{$municipio}/{$uf}\n";
        
        // Contatos
        if (!empty($parametros['Cabe√ßalho.cabecalho_telefone'])) {
            $cabecalho .= "Tel: " . $parametros['Cabe√ßalho.cabecalho_telefone'];
        }
        if (!empty($parametros['Cabe√ßalho.cabecalho_website'])) {
            $cabecalho .= " | " . $parametros['Cabe√ßalho.cabecalho_website'];
        }
        $cabecalho .= "\n";
        
        $cabecalho .= str_repeat("=", 80) . "\n";
        
        return $cabecalho;
    }

    /**
     * Gerar rodap√© com todos os par√¢metros
     */
    private function gerarRodape(array $parametros): string
    {
        $rodape = "\n\n" . str_repeat("-", 80) . "\n";
        
        // Texto do rodap√©
        if (!empty($parametros['Rodap√©.rodape_texto'])) {
            $rodape .= $parametros['Rodap√©.rodape_texto'] . "\n";
        }
        
        // Informa√ß√µes completas da c√¢mara
        $rodape .= "\n";
        $rodape .= $parametros['Dados Gerais da C√¢mara.nome_camara_oficial'] ?? 'C√ÇMARA MUNICIPAL';
        $rodape .= "\n";
        
        // Endere√ßo completo
        if (!empty($parametros['Dados Gerais da C√¢mara.endereco_logradouro'])) {
            $rodape .= $parametros['Dados Gerais da C√¢mara.endereco_logradouro'];
            if (!empty($parametros['Dados Gerais da C√¢mara.endereco_bairro'])) {
                $rodape .= ", " . $parametros['Dados Gerais da C√¢mara.endereco_bairro'];
            }
            if (!empty($parametros['Dados Gerais da C√¢mara.endereco_cep'])) {
                $rodape .= " - CEP: " . $parametros['Dados Gerais da C√¢mara.endereco_cep'];
            }
            $rodape .= "\n";
        }
        
        // Munic√≠pio/UF
        $municipio = $parametros['Dados Gerais da C√¢mara.municipio_nome'] ?? 'S√£o Paulo';
        $uf = $parametros['Dados Gerais da C√¢mara.municipio_uf'] ?? 'SP';
        $rodape .= "{$municipio}/{$uf}\n";
        
        // Telefones
        if (!empty($parametros['Dados Gerais da C√¢mara.telefone_principal'])) {
            $rodape .= "Tel: " . $parametros['Dados Gerais da C√¢mara.telefone_principal'];
            if (!empty($parametros['Dados Gerais da C√¢mara.telefone_protocolo'])) {
                $rodape .= " | Protocolo: " . $parametros['Dados Gerais da C√¢mara.telefone_protocolo'];
            }
            $rodape .= "\n";
        }
        
        // E-mail e website
        if (!empty($parametros['Dados Gerais da C√¢mara.email_oficial'])) {
            $rodape .= "E-mail: " . $parametros['Dados Gerais da C√¢mara.email_oficial'];
        }
        if (!empty($parametros['Dados Gerais da C√¢mara.website'])) {
            $rodape .= " | " . $parametros['Dados Gerais da C√¢mara.website'];
        }
        $rodape .= "\n";
        
        // Hor√°rios
        if (!empty($parametros['Dados Gerais da C√¢mara.horario_funcionamento'])) {
            $rodape .= "Hor√°rio de Funcionamento: " . $parametros['Dados Gerais da C√¢mara.horario_funcionamento'] . "\n";
        }
        if (!empty($parametros['Dados Gerais da C√¢mara.horario_protocolo'])) {
            $rodape .= "Hor√°rio do Protocolo: " . $parametros['Dados Gerais da C√¢mara.horario_protocolo'] . "\n";
        }
        
        // Numera√ß√£o de p√°gina (se configurado)
        if (!empty($parametros['Rodap√©.rodape_numeracao']) && $parametros['Rodap√©.rodape_numeracao']) {
            $rodape .= "\n[P√°gina \${pagina_atual} de \${total_paginas}]";
        }
        
        return $rodape;
    }

    /**
     * Gerar corpo do documento baseado no tipo
     */
    private function gerarCorpoPorTipo(TipoProposicao $tipo): string
    {
        $tipoLower = strtolower($tipo->codigo);
        
        if (str_contains($tipoLower, 'lei')) {
            return $this->gerarCorpoLei();
        } elseif (str_contains($tipoLower, 'indicacao')) {
            return $this->gerarCorpoIndicacao();
        } elseif (str_contains($tipoLower, 'requerimento')) {
            return $this->gerarCorpoRequerimento();
        } elseif (str_contains($tipoLower, 'mocao')) {
            return $this->gerarCorpoMocao();
        } elseif (str_contains($tipoLower, 'resolucao')) {
            return $this->gerarCorpoResolucao();
        } elseif (str_contains($tipoLower, 'decreto')) {
            return $this->gerarCorpoDecreto();
        } else {
            return $this->gerarCorpoPadrao();
        }
    }

    private function gerarCorpoLei(): string
    {
        return "O PRESIDENTE DA C√ÇMARA MUNICIPAL DE \${municipio}\n\n" .
               "Fa√ßo saber que a C√¢mara Municipal aprovou e eu promulgo a seguinte Lei:\n\n" .
               "Art. 1¬∫ \${texto_artigo_1}\n\n" .
               "Par√°grafo √∫nico. \${texto_paragrafo_unico}\n\n" .
               "Art. 2¬∫ \${texto_artigo_2}\n\n" .
               "Art. 3¬∫ Esta Lei entra em vigor na data de sua publica√ß√£o.\n\n" .
               "Art. 4¬∫ Revogam-se as disposi√ß√µes em contr√°rio.";
    }

    private function gerarCorpoIndicacao(): string
    {
        return "INDICO ao Excelent√≠ssimo Senhor Prefeito Municipal, nos termos regimentais, que:\n\n" .
               "\${texto}\n\n" .
               "CONSIDERANDOS:\n\n" .
               "- \${considerando_1}\n" .
               "- \${considerando_2}\n" .
               "- \${considerando_3}";
    }

    private function gerarCorpoRequerimento(): string
    {
        return "REQUEIRO √† Mesa, ouvido o Plen√°rio e cumpridas as formalidades regimentais, que:\n\n" .
               "\${texto}\n\n" .
               "JUSTIFICATIVA:\n" .
               "\${justificativa_requerimento}";
    }

    private function gerarCorpoMocao(): string
    {
        return "A C√ÇMARA MUNICIPAL DE \${municipio}, atrav√©s de seus representantes legais,\n\n" .
               "CONSIDERANDO \${considerando_mocao_1};\n\n" .
               "CONSIDERANDO \${considerando_mocao_2};\n\n" .
               "CONSIDERANDO \${considerando_mocao_3};\n\n" .
               "MANIFESTA \${tipo_manifestacao} a \${destinatario_mocao}\n\n" .
               "\${texto_mocao}";
    }

    private function gerarCorpoResolucao(): string
    {
        return "A MESA DA C√ÇMARA MUNICIPAL DE \${municipio}, no uso de suas atribui√ß√µes legais,\n\n" .
               "RESOLVE:\n\n" .
               "Art. 1¬∫ \${texto_artigo_1_resolucao}\n\n" .
               "Art. 2¬∫ \${texto_artigo_2_resolucao}\n\n" .
               "Art. 3¬∫ Esta Resolu√ß√£o entra em vigor na data de sua publica√ß√£o.";
    }

    private function gerarCorpoDecreto(): string
    {
        return "A MESA DA C√ÇMARA MUNICIPAL DE \${municipio}, no uso de suas atribui√ß√µes legais e regimentais,\n\n" .
               "DECRETA:\n\n" .
               "Art. 1¬∫ \${texto_artigo_1_decreto}\n\n" .
               "Art. 2¬∫ \${texto_artigo_2_decreto}\n\n" .
               "Art. 3¬∫ Este Decreto Legislativo entra em vigor na data de sua publica√ß√£o.";
    }

    private function gerarCorpoPadrao(): string
    {
        return "\${texto}\n\n" .
               "DISPOSI√á√ïES GERAIS:\n\n" .
               "\${disposicoes_gerais}";
    }

    /**
     * Verificar se tipo requer justificativa
     */
    private function tipoRequerJustificativa(TipoProposicao $tipo): bool
    {
        $tiposComJustificativa = [
            'projeto_lei_ordinaria',
            'projeto_lei_complementar',
            'indicacao',
            'requerimento'
        ];
        
        return in_array(strtolower($tipo->codigo), $tiposComJustificativa);
    }

    /**
     * Converter texto para RTF com formata√ß√£o e UTF-8 correto
     */
    private function converterParaRTF(string $texto, array $parametros): string
    {
        $fonte = $parametros['Formata√ß√£o.format_fonte'] ?? 'Arial';
        $tamanhoFonte = (int)($parametros['Formata√ß√£o.format_tamanho_fonte'] ?? 12);
        $espacamento = $parametros['Formata√ß√£o.format_espacamento'] ?? '1.5';
        
        // Converter espa√ßamento para RTF
        $espacamentoRTF = match($espacamento) {
            '1' => 'sl240',
            '1.5' => 'sl360',
            '2' => 'sl480',
            default => 'sl360'
        };

        // Cabe√ßalho RTF
        $rtf = "{\\rtf1\\ansi\\ansicpg65001\\deff0 {\\fonttbl {\\f0 {$fonte};}}";
        $rtf .= "\\f0\\fs" . ($tamanhoFonte * 2);
        $rtf .= "\\{$espacamentoRTF}\\slmult1 ";

        // Converter texto para RTF
        $textoConvertido = $this->converterUtf8ParaRtf($texto);
        
        $rtf .= $textoConvertido;
        $rtf .= "}";

        return $rtf;
    }

    /**
     * Converter UTF-8 para RTF
     */
    private function converterUtf8ParaRtf(string $texto): string
    {
        $textoProcessado = '';
        
        // Escapar caracteres especiais do RTF
        $texto = str_replace(['\\', '{', '}'], ['\\\\', '\\{', '\\}'], $texto);
        
        // Processar caractere por caractere
        $length = mb_strlen($texto, 'UTF-8');
        for ($i = 0; $i < $length; $i++) {
            $char = mb_substr($texto, $i, 1, 'UTF-8');
            $codepoint = mb_ord($char, 'UTF-8');
            
            if ($codepoint > 127) {
                $textoProcessado .= '\\u' . $codepoint . '*';
            } else {
                if ($char === "\n") {
                    $textoProcessado .= '\\par ';
                } else {
                    $textoProcessado .= $char;
                }
            }
        }
        
        return $textoProcessado;
    }
}