<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;

class CorrecaoPDFProtocoloAssinaturaSeeder extends Seeder
{
    /**
     * Corrige PDFs de proposi√ß√µes para mostrar n√∫mero de protocolo e assinatura
     * 
     * Esta corre√ß√£o resolve o problema onde PDFs protocolados n√£o mostravam:
     * - N√∫mero de protocolo (mostrava [AGUARDANDO PROTOCOLO])
     * - Assinatura digital do parlamentar
     * - Conte√∫do editado pelo Legislativo (arquivos RTF)
     * 
     * VERS√ÉO 2.0 - Agora suporta arquivos RTF editados pelo OnlyOffice
     */
    public function run(): void
    {
        $this->command->info('üîß Aplicando corre√ß√µes de PDF com protocolo e assinatura...');
        
        // 1. Corrigir m√©todo regenerarPDFAtualizado no ProposicaoAssinaturaController
        $this->corrigirProposicaoAssinaturaController();
        
        // 2. Melhorar o ProposicaoProtocoloController para regenerar PDF automaticamente
        $this->melhorarProposicaoProtocoloController();
        
        // 3. Regenerar PDFs de proposi√ß√µes protocoladas que n√£o est√£o corretos
        $this->regenerarPDFsProposicoes();
        
        // 4. Adicionar comando artisan para regenera√ß√£o manual
        $this->verificarComandoRegeneracao();
        
        $this->command->info('‚úÖ Corre√ß√µes de PDF aplicadas com sucesso!');
    }
    
    private function corrigirProposicaoAssinaturaController(): void
    {
        $arquivo = app_path('Http/Controllers/ProposicaoAssinaturaController.php');
        
        if (!File::exists($arquivo)) {
            $this->command->warn('‚ùå ProposicaoAssinaturaController.php n√£o encontrado');
            return;
        }
        
        $conteudo = File::get($arquivo);
        
        // Verificar se m√©todo gerarHTMLParaPDFComProtocolo existe e est√° correto
        if (!str_contains($conteudo, 'gerarHTMLParaPDFComProtocolo')) {
            $this->command->warn('‚ö†Ô∏è M√©todo gerarHTMLParaPDFComProtocolo n√£o encontrado');
            return;
        }
        
        // Verificar se substitui [AGUARDANDO PROTOCOLO] corretamente
        if (!str_contains($conteudo, 'numero_protocolo ?: \'[AGUARDANDO PROTOCOLO]\'')) {
            $this->command->warn('‚ö†Ô∏è Corre√ß√£o do n√∫mero de protocolo n√£o encontrada');
            return;
        }
        
        // Verificar se inclui assinatura digital
        if (!str_contains($conteudo, 'ASSINATURA DIGITAL')) {
            $this->command->warn('‚ö†Ô∏è C√≥digo de assinatura digital n√£o encontrado');
            return;
        }
        
        // Verificar se suporta arquivos RTF
        if (!str_contains($conteudo, 'criarPDFComConteudoRTFProcessado')) {
            $this->command->warn('‚ö†Ô∏è Suporte para arquivos RTF n√£o encontrado');
            return;
        }
        
        // Verificar se usa RTFTextExtractor
        if (!str_contains($conteudo, 'RTFTextExtractor::extract')) {
            $this->command->warn('‚ö†Ô∏è Extra√ß√£o de RTF n√£o configurada');
            return;
        }
        
        $this->command->info('‚úÖ ProposicaoAssinaturaController com corre√ß√µes RTF OK');
    }
    
    private function melhorarProposicaoProtocoloController(): void
    {
        $arquivo = app_path('Http/Controllers/ProposicaoProtocoloController.php');
        
        if (!File::exists($arquivo)) {
            $this->command->warn('‚ùå ProposicaoProtocoloController.php n√£o encontrado');
            return;
        }
        
        $conteudo = File::get($arquivo);
        
        // Verificar se chama regenerarPDFAtualizado
        if (!str_contains($conteudo, 'regenerarPDFAtualizado')) {
            $this->command->warn('‚ö†Ô∏è Chamada regenerarPDFAtualizado n√£o encontrada');
            return;
        }
        
        // Verificar se tem logs para troubleshooting
        if (!str_contains($conteudo, 'error_log')) {
            $this->command->warn('‚ö†Ô∏è Logs de troubleshooting n√£o encontrados');
            return;
        }
        
        $this->command->info('‚úÖ ProposicaoProtocoloController com melhorias OK');
    }
    
    private function regenerarPDFsProposicoes(): void
    {
        // Buscar proposi√ß√µes protocoladas que podem precisar de corre√ß√£o
        $proposicoes = DB::table('proposicoes')
            ->where('status', 'protocolado')
            ->whereNotNull('numero_protocolo')
            ->whereNotNull('assinatura_digital')
            ->get(['id', 'tipo', 'numero_protocolo']);
        
        $this->command->info("üìÑ Encontradas {$proposicoes->count()} proposi√ß√µes protocoladas com assinatura");
        
        if ($proposicoes->count() === 0) {
            return;
        }
        
        foreach ($proposicoes as $prop) {
            // Verificar se PDF existe e tem conte√∫do correto
            $pdfPath = $this->encontrarPDFProposicao($prop->id);
            
            if (!$pdfPath) {
                $this->command->warn("‚ö†Ô∏è PDF n√£o encontrado para proposi√ß√£o {$prop->id}");
                continue;
            }
            
            // Verificar conte√∫do do PDF
            $conteudoPDF = $this->extrairConteudoPDF($pdfPath);
            
            $temProtocolo = stripos($conteudoPDF, $prop->numero_protocolo) !== false;
            $temAssinatura = stripos($conteudoPDF, 'ASSINATURA DIGITAL') !== false;
            
            if (!$temProtocolo || !$temAssinatura) {
                $this->command->warn("‚ùå Proposi√ß√£o {$prop->id} ({$prop->tipo}) precisa de corre√ß√£o");
                $this->command->line("  - Protocolo no PDF: " . ($temProtocolo ? 'SIM' : 'N√ÉO'));
                $this->command->line("  - Assinatura no PDF: " . ($temAssinatura ? 'SIM' : 'N√ÉO'));
                
                // Marcar para regenera√ß√£o manual
                $this->command->warn("  ‚ö†Ô∏è Execute: php artisan proposicao:regenerar-pdf {$prop->id}");
            } else {
                $this->command->info("‚úÖ Proposi√ß√£o {$prop->id} ({$prop->tipo}) com PDF correto");
            }
        }
    }
    
    private function encontrarPDFProposicao($id): ?string
    {
        $diretoriosPDF = [
            storage_path("app/proposicoes/pdfs/{$id}/"),
            storage_path("app/private/proposicoes/pdfs/{$id}/"),
            storage_path("app/public/proposicoes/pdfs/{$id}/"),
        ];
        
        foreach ($diretoriosPDF as $dir) {
            if (is_dir($dir)) {
                $pdfs = glob($dir . '*.pdf');
                if (!empty($pdfs)) {
                    // Retornar o mais recente
                    usort($pdfs, function($a, $b) {
                        return filemtime($b) - filemtime($a);
                    });
                    return $pdfs[0];
                }
            }
        }
        
        return null;
    }
    
    private function extrairConteudoPDF($pdfPath): string
    {
        if (!file_exists($pdfPath)) {
            return '';
        }
        
        // Usar pdftotext para extrair conte√∫do
        $comando = "pdftotext '{$pdfPath}' -";
        $conteudo = shell_exec($comando);
        
        return $conteudo ?: '';
    }
    
    private function verificarComandoRegeneracao(): void
    {
        $comandoPath = app_path('Console/Commands/RegenerarPDFProposicao.php');
        
        if (File::exists($comandoPath)) {
            $this->command->info('‚úÖ Comando artisan proposicao:regenerar-pdf dispon√≠vel');
        } else {
            $this->command->warn('‚ö†Ô∏è Comando artisan para regenera√ß√£o n√£o encontrado');
        }
    }
}