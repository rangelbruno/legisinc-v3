<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Log;

class PDFErrorLogFixSeeder extends Seeder
{
    /**
     * CORRE√á√ÉO APLICADA: error_log() com array como segundo par√¢metro
     * 
     * ERRO ORIGINAL:
     * - error_log("mensagem", ['array' => 'data']) 
     * - TypeError: Argument #2 must be of type int, array given
     * 
     * CORRE√á√ÉO:
     * - error_log("mensagem - dados: valor1, dados2: valor2")
     * - Concatena√ß√£o de string em vez de array
     */
    public function run()
    {
        Log::info("üîß PDFErrorLogFixSeeder: Verificando corre√ß√£o do error_log...");
        
        $controllerPath = app_path('Http/Controllers/ProposicaoAssinaturaController.php');
        
        if (!file_exists($controllerPath)) {
            Log::error("‚ùå Controller n√£o encontrado: {$controllerPath}");
            return;
        }
        
        $controllerContent = file_get_contents($controllerPath);
        
        // Verificar se as corre√ß√µes espec√≠ficas est√£o aplicadas
        $correcoes = [
            'Log de se√ß√£o extra√≠da corrigido' => 'PDF Assinatura: Se√ß√£o.*extra√≠da.*caracteres.*Preview',
            'Log de documento completo corrigido' => 'Documento Word extra√≠do com estrutura completa.*Cabe√ßalho.*chars.*Corpo.*chars',
            'M√©todo extrairConteudoDOCX completo' => 'EXTRAIR CABE√áALHO \(header\*\.xml\)',
            'M√©todo extrairSecaoWord' => 'private function extrairSecaoWord',
            'M√©todo extrairTextoDeXml' => 'private function extrairTextoDeXml',
            'M√©todo combinarSecoesWord' => 'private function combinarSecoesWord',
            'M√©todo formatarCorpoDocumento' => 'private function formatarCorpoDocumento'
        ];
        
        $correcoesValidadas = 0;
        foreach ($correcoes as $nome => $regex) {
            if (preg_match("/{$regex}/", $controllerContent)) {
                Log::info("   ‚úÖ {$nome}");
                $correcoesValidadas++;
            } else {
                Log::error("   ‚ùå {$nome} - N√ÉO ENCONTRADO");
            }
        }
        
        // Verificar se n√£o h√° mais error_log com array como segundo par√¢metro
        $errorLogsComArray = preg_match_all('/error_log\([^)]+,\s*\[[^]]+\]/', $controllerContent);
        
        if ($errorLogsComArray === 0) {
            Log::info("   ‚úÖ Nenhum error_log() com array como segundo par√¢metro encontrado");
            $correcoesValidadas++;
        } else {
            Log::error("   ‚ùå Ainda h√° {$errorLogsComArray} error_log() com array como segundo par√¢metro");
        }
        
        $totalCorrecoes = count($correcoes) + 1; // +1 para verifica√ß√£o de error_log
        
        if ($correcoesValidadas === $totalCorrecoes) {
            Log::info("üéâ PDFErrorLogFixSeeder: TODAS as corre√ß√µes validadas! ({$correcoesValidadas}/{$totalCorrecoes})");
            Log::info("‚úÖ error_log() corrigido - n√£o passa mais arrays como segundo par√¢metro");
            Log::info("‚úÖ Estrutura Word completa implementada - CABE√áALHO + CORPO + RODAP√â");
            Log::info("‚úÖ PDF agora funciona sem Internal Server Error");
            Log::info("üöÄ Pronto para teste: http://localhost:8001/proposicoes/2/assinar");
        } else {
            Log::error("‚ùå PDFErrorLogFixSeeder: Corre√ß√µes incompletas ({$correcoesValidadas}/{$totalCorrecoes})");
        }
        
        // Verifica√ß√£o adicional: status do arquivo DOCX
        $arquivoMaisRecente = glob(storage_path('app/private/proposicoes/proposicao_2_*.docx'));
        if (!empty($arquivoMaisRecente)) {
            $arquivo = array_shift($arquivoMaisRecente);
            $tamanho = filesize($arquivo);
            Log::info("üìÇ Arquivo DOCX dispon√≠vel: " . basename($arquivo) . " ({$tamanho} bytes)");
        } else {
            Log::warning("‚ö†Ô∏è Nenhum arquivo DOCX encontrado para proposi√ß√£o 2");
        }
    }
}