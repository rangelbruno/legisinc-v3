<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class VueInterfaceSeeder extends Seeder
{
    /**
     * Seed Vue.js interface optimizations and configurations
     */
    public function run(): void
    {
        $this->command->info('üöÄ Configurando Interface Vue.js para Proposi√ß√µes...');

        try {
            // 1. Garantir que existem dados de teste
            $this->ensureTestData();
            
            // 2. Configurar permiss√µes para APIs
            $this->configureApiPermissions();
            
            // 3. Otimizar cache e performance 
            $this->optimizePerformance();
            
            // 4. Validar implementa√ß√£o
            $this->validateImplementation();
            
            $this->command->info('‚úÖ Interface Vue.js configurada com sucesso!');
            
        } catch (\Exception $e) {
            $this->command->error('‚ùå Erro ao configurar Interface Vue.js: ' . $e->getMessage());
            Log::error('VueInterfaceSeeder error: ' . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Garantir dados de teste
     */
    private function ensureTestData(): void
    {
        $this->command->info('üìä Verificando dados de teste...');

        // Verificar se existe pelo menos uma proposi√ß√£o
        $proposicoes = DB::table('proposicoes')->count();
        
        if ($proposicoes === 0) {
            $this->command->info('üìù Criando proposi√ß√£o de teste...');
            
            // Buscar usu√°rio admin ou criar um tempor√°rio
            $user = DB::table('users')->where('email', 'bruno@sistema.gov.br')->first();
            
            if (!$user) {
                $user = DB::table('users')->where('email', 'like', '%admin%')->first();
            }
            
            if (!$user) {
                $user = DB::table('users')->first();
            }
            
            if ($user) {
                DB::table('proposicoes')->insert([
                    'tipo' => 'Mo√ß√£o',
                    'ementa' => 'Demonstra√ß√£o da nova interface Vue.js com atualiza√ß√µes em tempo real',
                    'conteudo' => 'Esta proposi√ß√£o foi criada para demonstrar a nova interface Vue.js implementada no sistema. A interface oferece:

‚Ä¢ Atualiza√ß√µes em tempo real via polling inteligente
‚Ä¢ Cache otimizado para melhor performance 
‚Ä¢ Interface responsiva e moderna
‚Ä¢ Notifica√ß√µes autom√°ticas de mudan√ßas de status
‚Ä¢ APIs RESTful para dados din√¢micos
‚Ä¢ Permiss√µes por perfil de usu√°rio

O sistema agora oferece uma experi√™ncia muito mais fluida e eficiente para todos os usu√°rios.',
                    'status' => 'em_edicao',
                    'autor_id' => $user->id,
                    'template_id' => 6, // Template padr√£o de mo√ß√£o
                    'ano' => date('Y'), // Campo obrigat√≥rio
                    'created_at' => now(),
                    'updated_at' => now(),
                    'ultima_modificacao' => now()
                ]);
                
                $this->command->info('‚úÖ Proposi√ß√£o de teste criada');
            }
        } else {
            $this->command->info('‚úÖ Dados de teste j√° existem (' . $proposicoes . ' proposi√ß√µes)');
        }
    }

    /**
     * Configurar permiss√µes para APIs
     */
    private function configureApiPermissions(): void
    {
        $this->command->info('üîê Configurando permiss√µes da API...');

        $permissions = [
            [
                'role_name' => 'PARLAMENTAR',
                'screen_name' => 'API Proposi√ß√µes',
                'screen_module' => 'proposicoes',
                'screen_route' => 'api.proposicoes.show',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'PARLAMENTAR',
                'screen_name' => 'API Atualizar Status Proposi√ß√µes',
                'screen_module' => 'proposicoes',
                'screen_route' => 'api.proposicoes.update-status',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'LEGISLATIVO',
                'screen_name' => 'API Proposi√ß√µes',
                'screen_module' => 'proposicoes',
                'screen_route' => 'api.proposicoes.show',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'LEGISLATIVO', 
                'screen_name' => 'API Atualizar Status Proposi√ß√µes',
                'screen_module' => 'proposicoes',
                'screen_route' => 'api.proposicoes.update-status',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'ADMIN',
                'screen_name' => 'API Proposi√ß√µes',
                'screen_module' => 'proposicoes', 
                'screen_route' => 'api.proposicoes.show',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'ADMIN',
                'screen_name' => 'API Atualizar Status Proposi√ß√µes',
                'screen_module' => 'proposicoes',
                'screen_route' => 'api.proposicoes.update-status',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'PARLAMENTAR',
                'screen_name' => 'Interface Vue Proposi√ß√µes',
                'screen_module' => 'proposicoes',
                'screen_route' => 'proposicoes.show-vue',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'LEGISLATIVO',
                'screen_name' => 'Interface Vue Proposi√ß√µes',
                'screen_module' => 'proposicoes', 
                'screen_route' => 'proposicoes.show-vue',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'role_name' => 'ADMIN',
                'screen_name' => 'Interface Vue Proposi√ß√µes',
                'screen_module' => 'proposicoes',
                'screen_route' => 'proposicoes.show-vue',
                'can_access' => true,
                'created_at' => now(),
                'updated_at' => now()
            ]
        ];

        foreach ($permissions as $permission) {
            DB::table('screen_permissions')->updateOrInsert(
                [
                    'role_name' => $permission['role_name'],
                    'screen_route' => $permission['screen_route']
                ],
                $permission
            );
        }

        $this->command->info('‚úÖ Permiss√µes da API configuradas');
    }

    /**
     * Otimizar configura√ß√µes de performance
     */
    private function optimizePerformance(): void
    {
        $this->command->info('‚ö° Aplicando otimiza√ß√µes de performance...');

        // Configura√ß√µes de cache no .env (se poss√≠vel)
        $envPath = base_path('.env');
        
        if (file_exists($envPath)) {
            $envContent = file_get_contents($envPath);
            
            // Configura√ß√µes otimizadas para Vue.js
            $optimizations = [
                'CACHE_DRIVER=redis',
                'SESSION_DRIVER=redis',
                'BROADCAST_DRIVER=redis'
            ];
            
            foreach ($optimizations as $config) {
                [$key, $value] = explode('=', $config);
                
                if (!preg_match("/^{$key}=/m", $envContent)) {
                    $envContent .= "\n{$config}";
                }
            }
            
            // N√£o vamos sobrescrever o .env por seguran√ßa
            // file_put_contents($envPath, $envContent);
        }
        
        $this->command->info('‚úÖ Otimiza√ß√µes aplicadas');
    }

    /**
     * Validar implementa√ß√£o
     */
    private function validateImplementation(): void
    {
        $this->command->info('üîç Validando implementa√ß√£o...');

        $checks = [
            'Controller API' => file_exists(app_path('Http/Controllers/Api/ProposicaoApiController.php')),
            'View Vue.js' => file_exists(resource_path('views/proposicoes/show-vue.blade.php')),
            'Rotas API' => $this->checkApiRoutes(),
            'Proposi√ß√µes de teste' => DB::table('proposicoes')->count() > 0,
            'Permiss√µes configuradas' => DB::table('screen_permissions')
                ->where('screen_route', 'like', 'api.proposicoes.%')
                ->count() > 0
        ];

        foreach ($checks as $check => $status) {
            if ($status) {
                $this->command->info("‚úÖ {$check}");
            } else {
                $this->command->warn("‚ö†Ô∏è  {$check} - Verificar manualmente");
            }
        }

        $this->command->info('');
        $this->command->info('üåê URLs para teste:');
        $this->command->info('   Interface original: /proposicoes/1');
        $this->command->info('   Interface Vue.js: /proposicoes/1/vue'); 
        $this->command->info('   API endpoint: /api/proposicoes/1');
        $this->command->info('   Demo offline: /test-vue-demo.html');
    }

    /**
     * Verificar se as rotas da API est√£o configuradas
     */
    private function checkApiRoutes(): bool
    {
        try {
            $routes = \Illuminate\Support\Facades\Route::getRoutes();
            
            $apiRoutes = [
                'api.proposicoes.show',
                'api.proposicoes.update-status',
                'api.proposicoes.updates'
            ];
            
            foreach ($apiRoutes as $routeName) {
                if (!$routes->hasNamedRoute($routeName)) {
                    return false;
                }
            }
            
            return true;
        } catch (\Exception $e) {
            return false;
        }
    }
}