<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class CorrecaoAprovacaoLegislativoPDFSeeder extends Seeder
{
    /**
     * Aplica corre√ß√µes para garantir que aprova√ß√£o pelo Legislativo gere PDF com conte√∫do correto
     *
     * PROBLEMA: Quando Legislativo aprova proposi√ß√£o, PDF n√£o √© invalidado e continua
     * usando conte√∫do original do Parlamentar em vez do conte√∫do editado pelo Legislativo
     *
     * SOLU√á√ÉO: Verificar se as corre√ß√µes est√£o aplicadas nos controladores e aplicar se necess√°rio
     */
    public function run(): void
    {
        Log::info('üîß CorrecaoAprovacaoLegislativoPDFSeeder: Iniciando verifica√ß√£o de corre√ß√µes PDF');

        try {
            // 1. Verificar se ProposicaoLegislativoController tem a corre√ß√£o
            $this->verificarCorrecaoProposicaoLegislativoController();

            // 2. Verificar se ProposicaoController.updateStatus tem a corre√ß√£o
            $this->verificarCorrecaoUpdateStatus();

            // 3. Invalidar PDFs de proposi√ß√µes com status "aprovado" que n√£o tenham a corre√ß√£o aplicada
            $this->invalidarPDFsProposicoesAprovadas();

            Log::info('‚úÖ CorrecaoAprovacaoLegislativoPDFSeeder: Todas as corre√ß√µes verificadas e aplicadas');

        } catch (\Exception $e) {
            Log::error('‚ùå CorrecaoAprovacaoLegislativoPDFSeeder: Erro ao aplicar corre√ß√µes', [
                'erro' => $e->getMessage(),
                'linha' => $e->getLine(),
                'arquivo' => $e->getFile()
            ]);
        }
    }

    private function verificarCorrecaoProposicaoLegislativoController(): void
    {
        $arquivoController = app_path('Http/Controllers/ProposicaoLegislativoController.php');

        if (!file_exists($arquivoController)) {
            Log::warning('‚ö†Ô∏è Arquivo ProposicaoLegislativoController.php n√£o encontrado');
            return;
        }

        $conteudo = file_get_contents($arquivoController);

        // Verificar se tem a corre√ß√£o (invalida√ß√£o do PDF)
        $temCorrecao = strpos($conteudo, "// CR√çTICO: Invalidar PDF antigo para for√ßar regenera√ß√£o com conte√∫do editado pelo Legislativo") !== false
                    && strpos($conteudo, "'arquivo_pdf_path' => null") !== false;

        if ($temCorrecao) {
            Log::info('‚úÖ ProposicaoLegislativoController: Corre√ß√£o de invalida√ß√£o PDF j√° aplicada');
        } else {
            Log::warning('‚ö†Ô∏è ProposicaoLegislativoController: Corre√ß√£o de invalida√ß√£o PDF N√ÉO encontrada');
            Log::info('üìã A√á√ÉO NECESS√ÅRIA: Verificar se ProposicaoLegislativoController invalida PDF ao aprovar');
        }
    }

    private function verificarCorrecaoUpdateStatus(): void
    {
        $arquivoController = app_path('Http/Controllers/ProposicaoController.php');

        if (!file_exists($arquivoController)) {
            Log::warning('‚ö†Ô∏è Arquivo ProposicaoController.php n√£o encontrado');
            return;
        }

        $conteudo = file_get_contents($arquivoController);

        // Verificar se updateStatus tem corre√ß√£o para status "aprovado"
        $temCorrecao = strpos($conteudo, "if (\$novoStatus === 'aprovado')") !== false
                    && strpos($conteudo, "\$updateData['arquivo_pdf_path'] = null") !== false;

        if ($temCorrecao) {
            Log::info('‚úÖ ProposicaoController.updateStatus: Corre√ß√£o de invalida√ß√£o PDF j√° aplicada');
        } else {
            Log::warning('‚ö†Ô∏è ProposicaoController.updateStatus: Corre√ß√£o de invalida√ß√£o PDF N√ÉO encontrada');
            Log::info('üìã A√á√ÉO NECESS√ÅRIA: Verificar se updateStatus invalida PDF quando status vira "aprovado"');
        }
    }

    private function invalidarPDFsProposicoesAprovadas(): void
    {
        // Buscar proposi√ß√µes com status "aprovado" que tenham PDF antigo (poss√≠vel problema)
        $proposicoesComProblema = DB::table('proposicoes')
            ->where('status', 'aprovado')
            ->whereNotNull('arquivo_pdf_path')
            ->whereNotNull('arquivo_path') // Tem arquivo RTF editado
            ->get();

        if ($proposicoesComProblema->isEmpty()) {
            Log::info('‚ÑπÔ∏è Nenhuma proposi√ß√£o aprovada com PDF potencialmente desatualizado encontrada');
            return;
        }

        Log::info("üîç Encontradas {$proposicoesComProblema->count()} proposi√ß√µes aprovadas com PDF para verificar");

        $invalidados = 0;
        foreach ($proposicoesComProblema as $proposicao) {
            // Verificar se arquivo RTF existe e √© mais recente que o PDF
            $arquivoRTF = storage_path('app/' . $proposicao->arquivo_path);
            $arquivoPDF = storage_path('app/' . $proposicao->arquivo_pdf_path);

            if (file_exists($arquivoRTF) && file_exists($arquivoPDF)) {
                $rtfModificado = filemtime($arquivoRTF);
                $pdfModificado = filemtime($arquivoPDF);

                // Se RTF √© mais novo que PDF, invalidar PDF para for√ßar regenera√ß√£o
                if ($rtfModificado > $pdfModificado) {
                    DB::table('proposicoes')
                        ->where('id', $proposicao->id)
                        ->update([
                            'arquivo_pdf_path' => null,
                            'pdf_gerado_em' => null,
                            'pdf_conversor_usado' => null,
                            'updated_at' => now()
                        ]);

                    $invalidados++;
                    Log::info("üîÑ Proposi√ß√£o {$proposicao->id}: PDF invalidado (RTF mais recente que PDF)");
                }
            }
        }

        Log::info("‚úÖ Invalida√ß√£o conclu√≠da: {$invalidados} PDFs invalidados para regenera√ß√£o");
    }
}