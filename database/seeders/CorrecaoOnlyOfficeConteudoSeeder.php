<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\File;

class CorrecaoOnlyOfficeConteudoSeeder extends Seeder
{
    /**
     * Aplicar corre√ß√£o permanente para evitar substitui√ß√£o de conte√∫do no OnlyOffice
     * 
     * PROBLEMA RESOLVIDO:
     * - Sistema substitu√≠a conte√∫do original por texto extra√≠do de RTF corrompido
     * - Texto "ansi Objetivo geral..." era considerado v√°lido e substitu√≠a conte√∫do real
     * 
     * SOLU√á√ÉO:
     * - L√≥gica conservadora: preserva conte√∫do original sempre que poss√≠vel
     * - Valida√ß√£o rigorosa: rejeita padr√µes suspeitos como "ansi Objetivo"
     * - Logs detalhados para debugging
     */
    public function run(): void
    {
        // AUTO-REGISTRO: Garantir que este seeder sempre seja executado
        $this->garantirAutoRegistro();
        
        Log::info('üîß Aplicando corre√ß√£o OnlyOffice - Preserva√ß√£o de Conte√∫do');
        
        $arquivoOnlyOffice = app_path('Services/OnlyOffice/OnlyOfficeService.php');
        
        if (!File::exists($arquivoOnlyOffice)) {
            Log::error('Arquivo OnlyOfficeService n√£o encontrado', ['caminho' => $arquivoOnlyOffice]);
            return;
        }
        
        $conteudo = File::get($arquivoOnlyOffice);
        $correcoesAplicadas = 0;
        
        // 1. VERIFICAR E APLICAR L√ìGICA CONSERVADORA
        if (strpos($conteudo, 'ESTRAT√âGIA CONSERVADORA: PRIORIZAR PRESERVA√á√ÉO DO CONTE√öDO ORIGINAL') === false) {
            Log::info('Aplicando l√≥gica conservadora no callback OnlyOffice');
            
            $antigoCallback = '// ESTRAT√âGIA H√çBRIDA: Tentar atualizar conte√∫do se foi extra√≠do com sucesso';
            $novoCallback = '// ESTRAT√âGIA CONSERVADORA: PRIORIZAR PRESERVA√á√ÉO DO CONTE√öDO ORIGINAL
                $conteudoOriginal = $proposicao->conteudo;
                $temConteudoOriginalValido = !empty($conteudoOriginal) && strlen(trim($conteudoOriginal)) > 10;
                
                // ESTRAT√âGIA H√çBRIDA: Tentar atualizar conte√∫do se foi extra√≠do com sucesso';
            
            $conteudo = str_replace($antigoCallback, $novoCallback, $conteudo);
            $correcoesAplicadas++;
        }
        
        // 2. VERIFICAR E APLICAR NOVA L√ìGICA DE PRESERVA√á√ÉO
        if (strpos($conteudo, 'CONSERVANDO conte√∫do original existente') === false) {
            Log::info('Aplicando nova l√≥gica de preserva√ß√£o de conte√∫do');
            
            $antigaLogica = 'if (! empty($conteudoExtraido) && $this->isConteudoValido($conteudoExtraido)) {
                        $updateData[\'conteudo\'] = $conteudoExtraido;';
            
            $novaLogica = 'if ($temConteudoOriginalValido) {
                        // Se j√° tem conte√∫do v√°lido, N√ÉO substituir - apenas salvar arquivo
                        Log::info(\'CONSERVANDO conte√∫do original existente - n√£o extraindo do RTF\', [
                            \'proposicao_id\' => $proposicao->id,
                            \'estrategia\' => \'preservar_conteudo_original_existente\',
                            \'conteudo_original_length\' => strlen($conteudoOriginal),
                            \'conteudo_extraido_length\' => strlen($conteudoExtraido ?? \'\'),
                        ]);
                    } elseif (! empty($conteudoExtraido) && $this->isConteudoValidoRigoroso($conteudoExtraido)) {
                        // S√≥ substituir se n√£o h√° conte√∫do original E conte√∫do extra√≠do √© muito confi√°vel
                        $updateData[\'conteudo\'] = $conteudoExtraido;';
            
            $conteudo = str_replace($antigaLogica, $novaLogica, $conteudo);
            $correcoesAplicadas++;
        }
        
        // 3. VERIFICAR E APLICAR M√âTODO DE VALIDA√á√ÉO RIGOROSA
        if (strpos($conteudo, 'isConteudoValidoRigoroso') === false) {
            Log::info('Adicionando m√©todo de valida√ß√£o rigorosa');
            
            // Procurar onde inserir o m√©todo (ap√≥s m√©todo isConteudoValido)
            $posicaoInsercao = strpos($conteudo, 'private function isConteudoValido(string $conteudo): bool');
            
            if ($posicaoInsercao !== false) {
                // Encontrar final do m√©todo isConteudoValido
                $posicaoFim = strpos($conteudo, '    }', $posicaoInsercao);
                $posicaoFim = strpos($conteudo, "\n", $posicaoFim) + 1;
                
                $metodoRigoroso = '
    /**
     * Validar se conte√∫do extra√≠do √© texto v√°lido (n√£o corrompido) - VERS√ÉO RIGOROSA
     */
    private function isConteudoValidoRigoroso(string $conteudo): bool
    {
        Log::info(\'Validando conte√∫do extra√≠do RIGOROSAMENTE\', [
            \'tamanho\' => strlen($conteudo),
            \'preview\' => substr($conteudo, 0, 150)
        ]);
        
        // REJEITAR IMEDIATAMENTE se come√ßa com padr√µes suspeitos
        $padroesSuspeitos = [
            \'/^ansi\s/\',                    // Come√ßa com "ansi " - muito suspeito
            \'/^[a-z]{4,8}\s+(Objetivo|CONSIDERANDO|RESOLVE)/\',  // Padr√£o espec√≠fico do problema
            \'/^\w{3,6}\s+\w+\s+geral:/\',   // Padr√£o "xxx xxx geral:"
            \'/^[*\s;:]{10,}/\',             // Come√ßa com lixo RTF
        ];
        
        foreach ($padroesSuspeitos as $padrao) {
            if (preg_match($padrao, $conteudo)) {
                Log::warning(\'Conte√∫do REJEITADO por padr√£o suspeito\', [
                    \'padrao\' => $padrao,
                    \'preview\' => substr($conteudo, 0, 100)
                ]);
                return false;
            }
        }
        
        // Conte√∫do muito pequeno n√£o √© v√°lido
        if (strlen($conteudo) < 30) {
            Log::info(\'Conte√∫do rejeitado: muito pequeno para ser confi√°vel\', [\'tamanho\' => strlen($conteudo)]);
            return false;
        }
        
        // Se ap√≥s limpeza ainda cont√©m muito padr√£o RTF corrompido, rejeitar
        if (preg_match(\'/[*\s]{5,}[;:]/\', $conteudo)) {
            Log::info(\'Conte√∫do rejeitado: ainda cont√©m muito padr√£o RTF corrompido\');
            return false;
        }
        
        // Deve ter MUITAS palavras reais (pelo menos 5 palavras de 3+ caracteres)
        $palavras = preg_match_all(\'/\b[a-zA-Z√Ä-√ø]{3,}\b/\', $conteudo);
        if ($palavras < 5) {
            Log::info(\'Conte√∫do rejeitado: poucas palavras v√°lidas para ser confi√°vel\', [\'palavras_encontradas\' => $palavras]);
            return false;
        }
        
        // Pelo menos 50% do conte√∫do deve ser caracteres alfanum√©ricos ou espa√ßos (mais rigoroso)
        $totalChars = mb_strlen($conteudo, \'UTF-8\');
        if ($totalChars == 0) {
            Log::info(\'Conte√∫do rejeitado: vazio ap√≥s limpeza\');
            return false;
        }
        
        $validChars = preg_match_all(\'/[a-zA-Z√Ä-√ø0-9\s]/\', $conteudo);
        $porcentagemValida = $validChars / $totalChars;
        
        if ($porcentagemValida < 0.5) { // MAIS RIGOROSO: 50% em vez de 30%
            Log::info(\'Conte√∫do rejeitado: muitos caracteres especiais para ser confi√°vel\', [
                \'porcentagem_valida\' => round($porcentagemValida * 100, 2) . \'%\'
            ]);
            return false;
        }
        
        Log::info(\'Conte√∫do APROVADO na valida√ß√£o rigorosa\', [
            \'palavras\' => $palavras,
            \'porcentagem_valida\' => round($porcentagemValida * 100, 2) . \'%\'
        ]);
        
        return true;
    }
';
                
                $conteudo = substr_replace($conteudo, $metodoRigoroso, $posicaoFim, 0);
                $correcoesAplicadas++;
            }
        }
        
        // Salvar arquivo se corre√ß√µes foram aplicadas
        if ($correcoesAplicadas > 0) {
            File::put($arquivoOnlyOffice, $conteudo);
            Log::info('Corre√ß√µes OnlyOffice aplicadas', [
                'corre√ß√µes' => $correcoesAplicadas,
                'arquivo' => $arquivoOnlyOffice
            ]);
            
            echo "‚úÖ Corre√ß√£o OnlyOffice aplicada - {$correcoesAplicadas} melhorias\n";
        } else {
            Log::info('Corre√ß√µes OnlyOffice j√° est√£o aplicadas');
            echo "‚úÖ Corre√ß√µes OnlyOffice j√° aplicadas\n";
        }
    }
    
    /**
     * Auto-registro: Garantir que este seeder cr√≠tico sempre seja executado
     */
    private function garantirAutoRegistro(): void
    {
        $databaseSeederPath = database_path('seeders/DatabaseSeeder.php');
        
        if (!File::exists($databaseSeederPath)) {
            return;
        }
        
        $conteudo = File::get($databaseSeederPath);
        $className = self::class;
        
        // Se j√° est√° registrado, n√£o fazer nada
        if (strpos($conteudo, $className) !== false) {
            return;
        }
        
        // Procurar por um ponto seguro para inserir (antes do √∫ltimo seeder ou final)
        $pontos = [
            '        // √öLTIMO:',
            '        // CORRE√á√ïES CR√çTICAS FINAIS:',
            '    }' // Final da fun√ß√£o run
        ];
        
        foreach ($pontos as $ponto) {
            if (strpos($conteudo, $ponto) !== false) {
                $insercao = "        // CORRE√á√ÉO CR√çTICA AUTO-REGISTRADA: OnlyOffice Content Protection\n";
                $insercao .= "        \$this->call([\n";
                $insercao .= "            {$className}::class,\n";
                $insercao .= "        ]);\n\n        {$ponto}";
                
                $conteudo = str_replace($ponto, $insercao, $conteudo);
                
                File::put($databaseSeederPath, $conteudo);
                Log::info('Auto-registro aplicado: CorrecaoOnlyOfficeConteudoSeeder');
                break;
            }
        }
    }
}