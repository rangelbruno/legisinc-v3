<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\File;

class LimpezaCodigoDebugSeeder extends Seeder
{
    /**
     * Seeder para remover c√≥digo de debug e manter apenas vers√£o de produ√ß√£o
     * 
     * Este seeder garante que:
     * 1. Remove rotas de teste/debug tempor√°rias
     * 2. Remove bot√µes de debug das views
     * 3. Mant√©m apenas c√≥digo de produ√ß√£o limpo
     * 4. Preserva todas as otimiza√ß√µes funcionais
     */
    public function run(): void
    {
        $this->command->info('üßπ Limpando c√≥digo de debug e mantendo vers√£o de produ√ß√£o...');
        
        // 1. Limpar rotas de debug
        $this->limparRotasDebug();
        
        // 2. Limpar views de debug
        $this->limparViewsDebug();
        
        // 3. Validar que c√≥digo de produ√ß√£o est√° preservado
        $this->validarCodigoProducao();
        
        $this->command->info('‚úÖ C√≥digo de produ√ß√£o limpo e otimizado!');
    }
    
    /**
     * Remove rotas de debug tempor√°rias
     */
    private function limparRotasDebug(): void
    {
        $routesFile = base_path('routes/web.php');
        
        if (File::exists($routesFile)) {
            $content = File::get($routesFile);
            
            // Remover rota de teste debug
            $debugRoutePattern = '/\s*\/\/ ROTA DE TESTE - REMOVER AP√ìS DEBUG.*?->name\(\'test-debug\'\);/s';
            $content = preg_replace($debugRoutePattern, '', $content);
            
            // Remover linhas espec√≠ficas de debug se existirem
            $linesToRemove = [
                "    // ROTA DE TESTE - REMOVER AP√ìS DEBUG",
                "    Route::get('/{proposicao}/test-debug', function(\$proposicao) {",
                "        \$prop = App\\Models\\Proposicao::findOrFail(\$proposicao);",
                "        return response('<h1>TESTE DEBUG</h1><p>Proposi√ß√£o ID: ' . \$prop->id . '</p><p>Status: ' . \$prop->status . '</p><p>Usu√°rio atual: ' . (Auth::check() ? Auth::user()->name : 'N√ÉO LOGADO') . '</p><a href=\"/proposicoes/1\">‚Üê Voltar</a>');",
                "    })->name('test-debug');"
            ];
            
            foreach ($linesToRemove as $line) {
                $content = str_replace($line, '', $content);
            }
            
            // Limpar linhas vazias excessivas
            $content = preg_replace('/\n\s*\n\s*\n/', "\n\n", $content);
            
            File::put($routesFile, $content);
            $this->command->info('   üóëÔ∏è Rotas de debug removidas de routes/web.php');
        }
    }
    
    /**
     * Remove bot√µes de debug das views
     */
    private function limparViewsDebug(): void
    {
        $showViewFile = base_path('resources/views/proposicoes/show.blade.php');
        
        if (File::exists($showViewFile)) {
            $content = File::get($showViewFile);
            
            // Remover bloco de bot√£o de debug
            $debugButtonPattern = '/\s*<!-- TESTE DEBUG - REMOVER AP√ìS -->.*?<\/a>/s';
            $content = preg_replace($debugButtonPattern, '', $content);
            
            // Remover linhas espec√≠ficas se existirem
            $linesToRemove = [
                '                            <!-- TESTE DEBUG - REMOVER AP√ìS -->',
                '                            <a href="{{ route(\'proposicoes.test-debug\', $proposicao->id) }}" class="btn btn-warning btn-sm mt-2">',
                '                                üîç TESTE DEBUG',
                '                            </a>'
            ];
            
            foreach ($linesToRemove as $line) {
                $content = str_replace($line, '', $content);
            }
            
            File::put($showViewFile, $content);
            $this->command->info('   üóëÔ∏è Bot√µes de debug removidos de show.blade.php');
        }
    }
    
    /**
     * Validar que c√≥digo de produ√ß√£o essencial est√° preservado
     */
    private function validarCodigoProducao(): void
    {
        $this->command->info('   üîç Validando c√≥digo de produ√ß√£o...');
        
        // Verificar ProposicaoAssinaturaController
        $controllerFile = base_path('app/Http/Controllers/ProposicaoAssinaturaController.php');
        if (File::exists($controllerFile)) {
            $content = File::get($controllerFile);
            
            $methodsRequired = [
                'encontrarArquivoMaisRecente',
                'extrairConteudoDOCX',
                'limparPDFsAntigos'
            ];
            
            $allMethodsPresent = true;
            foreach ($methodsRequired as $method) {
                if (!str_contains($content, $method)) {
                    $allMethodsPresent = false;
                    $this->command->warn("      ‚ö†Ô∏è M√©todo $method n√£o encontrado no Controller");
                }
            }
            
            if ($allMethodsPresent) {
                $this->command->info('      ‚úÖ ProposicaoAssinaturaController: M√©todos otimizados preservados');
            }
        }
        
        // Verificar OnlyOfficeService
        $serviceFile = base_path('app/Services/OnlyOffice/OnlyOfficeService.php');
        if (File::exists($serviceFile)) {
            $content = File::get($serviceFile);
            
            if (str_contains($content, 'timestamp = time()')) {
                $this->command->info('      ‚úÖ OnlyOfficeService: Callback otimizado preservado');
            } else {
                $this->command->warn('      ‚ö†Ô∏è OnlyOfficeService: Callback pode precisar verifica√ß√£o');
            }
        }
        
        // Verificar rota principal de assinatura
        $routesFile = base_path('routes/web.php');
        if (File::exists($routesFile)) {
            $content = File::get($routesFile);
            
            if (str_contains($content, "Route::get('/{proposicao}/assinar'") && 
                str_contains($content, 'ProposicaoAssinaturaController::class')) {
                $this->command->info('      ‚úÖ Rota proposicoes.assinar preservada');
            } else {
                $this->command->warn('      ‚ö†Ô∏è Rota de assinatura pode estar comprometida');
            }
        }
        
        // Verificar permiss√µes
        $permission = \DB::table('screen_permissions')
            ->where('role_name', 'PARLAMENTAR')
            ->where('screen_route', 'proposicoes.assinar')
            ->where('can_access', true)
            ->first();
            
        if ($permission) {
            $this->command->info('      ‚úÖ Permiss√£o proposicoes.assinar preservada');
        } else {
            $this->command->warn('      ‚ö†Ô∏è Permiss√£o de assinatura pode estar faltando');
        }
    }
}