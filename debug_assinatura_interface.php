<?php
/**
 * Debug para verificar se a interface de assinatura est√° funcionando
 */

require_once __DIR__ . '/vendor/autoload.php';

// Carregar app Laravel
$app = require_once __DIR__ . '/bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use App\Models\User;
use App\Models\Proposicao;

echo "üîç Debug da Interface de Assinatura Digital\n\n";

// 1. Verificar usu√°rio com certificado
echo "1Ô∏è‚É£ Verificando usu√°rio Jessica Santos (ID: 2):\n";
try {
    $user = User::find(2);
    if ($user) {
        echo "‚úÖ Usu√°rio encontrado: {$user->name}\n";
        echo "   üìÑ CN: {$user->certificado_digital_cn}\n";
        echo "   üìÖ Validade: {$user->certificado_digital_validade}\n";
        echo "   üîµ Ativo: " . ($user->certificado_digital_ativo ? 'Sim' : 'N√£o') . "\n";
        echo "   üîê Senha salva: " . ($user->certificado_digital_senha_salva ? 'Sim' : 'N√£o') . "\n\n";
        
        // Verificar m√©todos
        echo "   üîç temCertificadoDigital(): " . ($user->temCertificadoDigital() ? 'Sim' : 'N√£o') . "\n";
        echo "   ‚úÖ certificadoDigitalValido(): " . ($user->certificadoDigitalValido() ? 'Sim' : 'N√£o') . "\n";
        
        // Verificar se o certificado est√° expirado
        $validade = \Carbon\Carbon::parse($user->certificado_digital_validade);
        $agora = \Carbon\Carbon::now();
        echo "   ‚è∞ Validade em Carbon: {$validade->format('d/m/Y')}\n";
        echo "   üìÖ Data atual: {$agora->format('d/m/Y')}\n";
        echo "   üî¥ Est√° expirado: " . ($validade->isPast() ? 'Sim' : 'N√£o') . "\n\n";
        
    } else {
        echo "‚ùå Usu√°rio n√£o encontrado\n\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro: {$e->getMessage()}\n\n";
}

// 2. Verificar proposi√ß√£o
echo "2Ô∏è‚É£ Verificando proposi√ß√£o ID 1:\n";
try {
    $proposicao = Proposicao::find(1);
    if ($proposicao) {
        echo "‚úÖ Proposi√ß√£o encontrada: {$proposicao->ementa}\n";
        echo "   üìä Status: {$proposicao->status}\n";
        echo "   üë§ Autor: {$proposicao->autor->name}\n";
        echo "   üéØ Pronta para assinatura: " . (in_array($proposicao->status, ['aprovado', 'aprovado_assinatura']) ? 'Sim' : 'N√£o') . "\n\n";
    } else {
        echo "‚ùå Proposi√ß√£o n√£o encontrada\n\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro: {$e->getMessage()}\n\n";
}

// 3. Simular dados que ser√£o passados para a view
echo "3Ô∏è‚É£ Dados que ser√£o passados para a view:\n";
if (isset($user) && $user) {
    $certificadoCadastrado = $user->temCertificadoDigital();
    $certificadoValido = $user->certificadoDigitalValido();
    $senhaSalva = $user->certificado_digital_senha_salva ?? false;
    
    echo "   certificadoCadastrado: " . ($certificadoCadastrado ? 'true' : 'false') . "\n";
    echo "   certificadoValido: " . ($certificadoValido ? 'true' : 'false') . "\n";
    echo "   senhaSalva: " . ($senhaSalva ? 'true' : 'false') . "\n\n";
    
    if ($certificadoCadastrado) {
        $dadosCertificado = [
            'cn' => $user->certificado_digital_cn,
            'validade' => \Carbon\Carbon::parse($user->certificado_digital_validade),
            'ativo' => $user->certificado_digital_ativo,
            'senha_salva' => $senhaSalva,
            'path' => $user->certificado_digital_path
        ];
        echo "   dadosCertificado:\n";
        echo "     - CN: {$dadosCertificado['cn']}\n";
        echo "     - Validade: {$dadosCertificado['validade']->format('d/m/Y')}\n";
        echo "     - Ativo: " . ($dadosCertificado['ativo'] ? 'Sim' : 'N√£o') . "\n";
        echo "     - Senha salva: " . ($dadosCertificado['senha_salva'] ? 'Sim' : 'N√£o') . "\n\n";
    }
}

// 4. Verificar comportamento esperado da interface
echo "4Ô∏è‚É£ Comportamento esperado da interface:\n";
if (isset($certificadoCadastrado) && $certificadoCadastrado) {
    echo "‚úÖ DEVE mostrar se√ß√£o 'Certificado Digital Detectado'\n";
    
    if ($certificadoValido) {
        echo "‚úÖ DEVE mostrar alert verde (alert-success)\n";
        echo "‚úÖ DEVE mostrar checkbox 'Usar Certificado Cadastrado' marcado\n";
        echo "‚úÖ DEVE ocultar se√ß√£o 'Tipo de Certificado' por padr√£o\n";
        
        if ($senhaSalva) {
            echo "‚úÖ DEVE ocultar campo de senha\n";
            echo "‚úÖ DEVE mostrar bot√£o 'Assinar Automaticamente'\n";
            echo "‚úÖ DEVE mostrar SweetAlert de assinatura autom√°tica\n";
        } else {
            echo "‚úÖ DEVE mostrar campo de senha\n";
            echo "‚úÖ DEVE mostrar bot√£o 'Assinar Documento'\n";
            echo "‚úÖ DEVE mostrar SweetAlert informando que senha ser√° solicitada\n";
        }
    } else {
        echo "‚ö†Ô∏è  DEVE mostrar alert laranja (alert-warning)\n";
        echo "‚ö†Ô∏è  DEVE mostrar badge 'EXPIRADO'\n";
        echo "‚ö†Ô∏è  DEVE mostrar SweetAlert de certificado expirado\n";
        echo "‚ö†Ô∏è  DEVE permitir usar op√ß√£o manual\n";
    }
} else {
    echo "‚ÑπÔ∏è  DEVE mostrar interface tradicional (sem certificado detectado)\n";
    echo "‚ÑπÔ∏è  DEVE mostrar op√ß√µes A1, A3, PFX normalmente\n";
}

echo "\n";

// 5. URLs para teste
echo "5Ô∏è‚É£ URLs para teste:\n";
echo "   üåê Assinatura Digital: http://localhost:8001/proposicoes/1/assinatura-digital\n";
echo "   üë§ Editar Parlamentar: http://localhost:8001/parlamentares/2/edit\n";
echo "   üìÑ Ver Proposi√ß√£o: http://localhost:8001/proposicoes/1\n\n";

echo "üéØ SITUA√á√ÉO ATUAL:\n";
echo "   - Certificado CADASTRADO ‚úÖ\n";
echo "   - Certificado EXPIRADO ‚ö†Ô∏è\n";
echo "   - Senha N√ÉO SALVA ‚ùå\n";
echo "   - Interface DEVE mostrar certificado com aviso de expirado\n\n";

echo "üí° PARA TESTAR COMPLETAMENTE:\n";
echo "   1. Atualize a validade do certificado para futuro\n";
echo "   2. Ou cadastre um novo certificado\n";
echo "   3. Acesse a URL de assinatura digital\n\n";

echo "‚úÖ Debug conclu√≠do!\n";