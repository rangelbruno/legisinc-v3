#!/bin/bash

echo "üöÄ === TESTE: INTERFACE VUE.JS OTIMIZADA ===" 

# Cores
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "\n${BLUE}üìã Nova Interface Vue.js com Cards Din√¢micos:${NC}"
echo "‚úÖ 1. Estrutura em cards responsivos organizados"
echo "‚úÖ 2. Busca em tempo real do BD via API otimizada"
echo "‚úÖ 3. Cache inteligente baseado em timestamps"
echo "‚úÖ 4. Polling adaptativo (30s) com detec√ß√£o de foco"
echo "‚úÖ 5. A√ß√µes din√¢micas baseadas em permiss√µes"
echo "‚úÖ 6. Timeline interativo de tramita√ß√£o"
echo "‚úÖ 7. Sistema de notifica√ß√µes toast"
echo "‚úÖ 8. Expans√£o/contra√ß√£o de conte√∫do longo"

echo -e "\n${YELLOW}üß™ TESTE 1: Verificar dados da proposi√ß√£o atual${NC}"

docker exec legisinc-app php artisan tinker --execute="
\$proposicao = App\Models\Proposicao::find(1);
if (\$proposicao) {
    echo 'ID: ' . \$proposicao->id . PHP_EOL;
    echo 'Tipo: ' . \$proposicao->tipo . PHP_EOL;
    echo 'Status: ' . \$proposicao->status . PHP_EOL;
    echo 'Ementa: ' . substr(\$proposicao->ementa, 0, 80) . '...' . PHP_EOL;
    echo 'Conte√∫do: ' . (strlen(\$proposicao->conteudo) > 0 ? 'SIM (' . strlen(\$proposicao->conteudo) . ' chars)' : 'N√ÉO') . PHP_EOL;
    echo 'Autor: ' . (\$proposicao->autor ? \$proposicao->autor->name : 'N/A') . PHP_EOL;
    echo '√öltima modifica√ß√£o: ' . \$proposicao->updated_at . PHP_EOL;
} else {
    echo 'Proposi√ß√£o n√£o encontrada' . PHP_EOL;
}
"

echo -e "\n${YELLOW}üß™ TESTE 2: Verificar API Controller otimizada${NC}"

# Verificar se m√©todos foram adicionados
API_METHODS_COUNT=$(grep -c "getProposicaoWithCache\|formatProposicaoResponse\|clearProposicaoCache" /home/bruno/legisinc/app/Http/Controllers/Api/ProposicaoApiController.php)
if [ "$API_METHODS_COUNT" -ge 3 ]; then
    echo "‚úÖ M√©todos de otimiza√ß√£o adicionados ao API Controller"
else
    echo "‚ùå M√©todos de otimiza√ß√£o N√ÉO encontrados no API Controller"
fi

# Verificar cache inteligente
CACHE_OPTIMIZATION=$(grep -c "Cache::remember.*proposicao_api" /home/bruno/legisinc/app/Http/Controllers/Api/ProposicaoApiController.php)
if [ "$CACHE_OPTIMIZATION" -gt 0 ]; then
    echo "‚úÖ Cache inteligente implementado ($CACHE_OPTIMIZATION implementa√ß√µes)"
else
    echo "‚ùå Cache inteligente N√ÉO implementado"
fi

echo -e "\n${YELLOW}üß™ TESTE 3: Verificar template Vue.js${NC}"

# Verificar componentes Vue principais
VUE_COMPONENTS=$(grep -c "v-if\|v-show\|v-for\|@click\|:class" /home/bruno/legisinc/resources/views/proposicoes/show.blade.php)
if [ "$VUE_COMPONENTS" -gt 30 ]; then
    echo "‚úÖ Componentes Vue.js implementados ($VUE_COMPONENTS diretivas)"
else
    echo "‚ùå Componentes Vue.js insuficientes ($VUE_COMPONENTS diretivas)"
fi

# Verificar cards organizados
CARDS_COUNT=$(grep -c "class.*card.*border-0" /home/bruno/legisinc/resources/views/proposicoes/show.blade.php)
if [ "$CARDS_COUNT" -ge 4 ]; then
    echo "‚úÖ Cards din√¢micos organizados ($CARDS_COUNT cards)"
else
    echo "‚ùå Cards insuficientes ($CARDS_COUNT cards)"
fi

# Verificar polling inteligente
POLLING_CODE=$(grep -c "setInterval\|document.hidden\|checkForUpdates" /home/bruno/legisinc/resources/views/proposicoes/show.blade.php)
if [ "$POLLING_CODE" -ge 3 ]; then
    echo "‚úÖ Polling inteligente implementado"
else
    echo "‚ùå Polling inteligente N√ÉO implementado"
fi

# Verificar sistema de notifica√ß√µes
TOAST_SYSTEM=$(grep -c "showToast\|toast.*show\|removeToast" /home/bruno/legisinc/resources/views/proposicoes/show.blade.php)
if [ "$TOAST_SYSTEM" -ge 3 ]; then
    echo "‚úÖ Sistema de notifica√ß√µes toast implementado"
else
    echo "‚ùå Sistema de notifica√ß√µes N√ÉO implementado"
fi

echo -e "\n${YELLOW}üß™ TESTE 4: Testar API de proposi√ß√µes${NC}"

# Simular chamada API
API_TEST=$(docker exec legisinc-app php artisan tinker --execute="
try {
    \$user = App\Models\User::find(6);
    Auth::login(\$user);
    \$controller = new App\Http\Controllers\Api\ProposicaoApiController();
    \$response = \$controller->show(1);
    \$content = json_decode(\$response->getContent(), true);
    if (\$content['success']) {
        echo 'API_SUCCESS:' . \$response->getStatusCode() . PHP_EOL;
        echo 'DATA_KEYS:' . count(\$content['proposicao']) . PHP_EOL;
        echo 'HAS_META:' . (isset(\$content['proposicao']['meta']) ? 'YES' : 'NO') . PHP_EOL;
        echo 'HAS_PERMISSIONS:' . (isset(\$content['proposicao']['permissions']) ? 'YES' : 'NO') . PHP_EOL;
        echo 'CACHE_HIT:' . (\$content['cache_hit'] ? 'YES' : 'NO') . PHP_EOL;
    } else {
        echo 'API_ERROR:' . \$content['message'] . PHP_EOL;
    }
} catch (Exception \$e) {
    echo 'EXCEPTION:' . \$e->getMessage() . PHP_EOL;
}
")

if echo "$API_TEST" | grep -q "API_SUCCESS:200"; then
    echo "‚úÖ API Controller funcionando corretamente"
    
    if echo "$API_TEST" | grep -q "HAS_META:YES"; then
        echo "‚úÖ Metadados otimizados inclu√≠dos"
    fi
    
    if echo "$API_TEST" | grep -q "HAS_PERMISSIONS:YES"; then
        echo "‚úÖ Sistema de permiss√µes funcionando"
    fi
    
    if echo "$API_TEST" | grep -q "CACHE_HIT:"; then
        echo "‚úÖ Cache system operacional"
    fi
else
    echo "‚ùå API Controller com problemas"
    echo "$API_TEST"
fi

echo -e "\n${YELLOW}üß™ TESTE 5: Verificar integra√ß√£o com template do projeto${NC}"

# Verificar uso do layout do projeto
LAYOUT_INTEGRATION=$(grep -c "@extends('components.layouts.app')" /home/bruno/legisinc/resources/views/proposicoes/show.blade.php)
if [ "$LAYOUT_INTEGRATION" -gt 0 ]; then
    echo "‚úÖ Integrado com layout do projeto"
else
    echo "‚ùå N√ÉO integrado com layout do projeto"
fi

# Verificar √≠cones do template
TEMPLATE_ICONS=$(grep -c "ki-duotone" /home/bruno/legisinc/resources/views/proposicoes/show.blade.php)
if [ "$TEMPLATE_ICONS" -gt 20 ]; then
    echo "‚úÖ √çcones do template utilizados ($TEMPLATE_ICONS √≠cones)"
else
    echo "‚ùå √çcones do template insuficientes ($TEMPLATE_ICONS √≠cones)"
fi

# Verificar classes do framework
FRAMEWORK_CLASSES=$(grep -c "fs-\|text-\|bg-\|badge-\|btn-" /home/bruno/legisinc/resources/views/proposicoes/show.blade.php)
if [ "$FRAMEWORK_CLASSES" -gt 50 ]; then
    echo "‚úÖ Classes do framework utilizadas ($FRAMEWORK_CLASSES classes)"
else
    echo "‚ùå Classes do framework insuficientes ($FRAMEWORK_CLASSES classes)"
fi

echo -e "\n${PURPLE}‚ö° TESTE 6: Performance e otimiza√ß√µes${NC}"

# Verificar otimiza√ß√µes implementadas
echo -e "${PURPLE}Cache Strategy:${NC}"
echo "‚Ä¢ Cache baseado em timestamp (√∫ltimo modified)"
echo "‚Ä¢ Cache por 5 minutos com invalida√ß√£o autom√°tica"
echo "‚Ä¢ Preview de conte√∫do para textos longos"

echo -e "\n${PURPLE}Polling Strategy:${NC}"
echo "‚Ä¢ Intervalo de 30 segundos (ajust√°vel)"
echo "‚Ä¢ Para quando janela n√£o est√° em foco"
echo "‚Ä¢ Verifica√ß√£o de atualiza√ß√µes sem recarregar dados"

echo -e "\n${PURPLE}UI Optimizations:${NC}"
echo "‚Ä¢ Cards modulares e responsivos"
echo "‚Ä¢ Expans√£o de conte√∫do sob demanda"
echo "‚Ä¢ Sistema de notifica√ß√µes n√£o-obstrutivo"
echo "‚Ä¢ Timeline din√¢mico baseado em status"

echo -e "\n${GREEN}‚úÖ RESUMO DA NOVA INTERFACE:${NC}"
echo ""
echo -e "${GREEN}üé® UI/UX Melhorada:${NC}"
echo "‚Ä¢ Layout em cards organizados e limpos"
echo "‚Ä¢ Informa√ß√µes hierarquizadas por import√¢ncia"
echo "‚Ä¢ Indicadores visuais de status e progress"
echo "‚Ä¢ A√ß√µes contextuais baseadas em permiss√µes"

echo -e "\n${GREEN}‚ö° Performance Otimizada:${NC}"
echo "‚Ä¢ API com cache inteligente (5min TTL)"
echo "‚Ä¢ Polling adaptativo que economiza recursos"
echo "‚Ä¢ Carregamento progressivo de conte√∫do"
echo "‚Ä¢ Metadados calculados no backend"

echo -e "\n${GREEN}üîÑ Tempo Real:${NC}"
echo "‚Ä¢ Sincroniza√ß√£o autom√°tica a cada 30s"
echo "‚Ä¢ Detec√ß√£o de mudan√ßas sem interferir na UX"
echo "‚Ä¢ Notifica√ß√µes contextuais de atualiza√ß√µes"
echo "‚Ä¢ Timeline atualizado dinamicamente"

echo -e "\n${GREEN}üõ†Ô∏è Funcionalidades:${NC}"
echo "‚Ä¢ Bot√£o 'Continuar Editando' inteligente"
echo "‚Ä¢ 'Enviar para Legislativo' com valida√ß√µes"
echo "‚Ä¢ A√ß√µes do Legislativo (Aprovar/Devolver/Reprovar)"
echo "‚Ä¢ Sistema de assinatura digital integrado"

echo -e "\n${BLUE}üöÄ COMO TESTAR:${NC}"
echo "1. Acesse: http://localhost:8001/proposicoes/1"
echo "2. Login: jessica@sistema.gov.br / 123456 (Parlamentar)"
echo "3. Observe interface com cards organizados"
echo "4. Teste bot√µes contextuais baseados no status"
echo "5. Aguarde 30s para ver polling autom√°tico"
echo "6. Use bot√£o 'Atualizar Dados' para refresh manual"
echo "7. ‚ú® Interface moderna, responsiva e perform√°tica!"

echo -e "\n${GREEN}üéâ MIGRA√á√ÉO CONCLU√çDA PARA VUE.JS OTIMIZADO!${NC}"
echo -e "üì± Interface: ${YELLOW}Responsiva com cards din√¢micos${NC}"
echo -e "‚ö° Performance: ${YELLOW}Cache inteligente + polling adaptativo${NC}"
echo -e "üîÑ Tempo Real: ${YELLOW}Sincroniza√ß√£o autom√°tica a cada 30s${NC}"
echo -e "üéØ UX: ${YELLOW}A√ß√µes contextuais + notifica√ß√µes toast${NC}"
echo -e "üíæ BD: ${YELLOW}Busca otimizada com metadados calculados${NC}"