<?php

require_once __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel
$app = require_once __DIR__.'/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "=== TESTE DE OTIMIZA√á√ÉO PARA LEGISLATIVO ===\n\n";

// Verificar se existe uma proposi√ß√£o com arquivo salvo
$proposicao = \App\Models\Proposicao::where('arquivo_path', '!=', null)
    ->where('arquivo_path', '!=', '')
    ->first();

if (!$proposicao) {
    echo "‚ùå Nenhuma proposi√ß√£o com arquivo salvo encontrada.\n";
    echo "Criando proposi√ß√£o de teste...\n";
    
    $proposicao = \App\Models\Proposicao::create([
        'tipo' => 'mocao',
        'ementa' => 'Teste de arquivo salvo para legislativo',
        'conteudo' => 'Conte√∫do de teste com acentua√ß√£o: S√£o Paulo, Jo√£o, Mo√ß√£o',
        'status' => 'enviado_legislativo',
        'autor_id' => 1,
        'arquivo_path' => 'proposicoes/proposicao_999_teste.rtf'
    ]);
    
    // Criar arquivo fake
    Storage::disk('public')->put($proposicao->arquivo_path, 
        '{\rtf1 Teste de arquivo salvo com acentua\u231*\u227*o}');
    
    echo "‚úÖ Proposi√ß√£o de teste criada: ID {$proposicao->id}\n\n";
}

echo "1. VERIFICANDO EXIST√äNCIA DE ARQUIVO\n";
echo str_repeat('-', 50) . "\n";

$temArquivoSalvo = !empty($proposicao->arquivo_path) && 
                  (Storage::disk('local')->exists($proposicao->arquivo_path) || 
                   Storage::disk('public')->exists($proposicao->arquivo_path) ||
                   file_exists(storage_path('app/' . $proposicao->arquivo_path)));

echo "Proposi√ß√£o ID: {$proposicao->id}\n";
echo "Arquivo Path: {$proposicao->arquivo_path}\n";
echo "Arquivo existe: " . ($temArquivoSalvo ? '‚úÖ SIM' : '‚ùå N√ÉO') . "\n";
echo "Status: {$proposicao->status}\n\n";

echo "2. SIMULANDO L√ìGICA DO ONLYOFFICE CONTROLLER\n";
echo str_repeat('-', 50) . "\n";

if ($temArquivoSalvo) {
    echo "‚úÖ RESULTADO: Legislativo usar√° arquivo salvo existente (R√ÅPIDO)\n";
    echo "   - N√£o processar√° template universal (evita 20+ segundos)\n";
    echo "   - Carregar√° documento j√° editado pelo Parlamentar\n";
    echo "   - Caracteres especiais j√° processados corretamente\n";
} else {
    echo "‚ö†Ô∏è FALLBACK: Usar√° template universal (mais lento)\n";
    echo "   - S√≥ acontece se n√£o existir arquivo salvo\n";
    echo "   - Necess√°rio processar template do zero\n";
}

echo "\n3. VERIFICANDO FLUXO ESPEC√çFICO\n";
echo str_repeat('-', 50) . "\n";

// Simular verifica√ß√£o de tipo de proposi√ß√£o
$proposicao->load('tipoProposicao');
$templateUniversalService = app(\App\Services\Template\TemplateUniversalService::class);

if ($proposicao->tipoProposicao) {
    $deveUsarUniversal = $templateUniversalService->deveUsarTemplateUniversal($proposicao->tipoProposicao);
    echo "Tipo de proposi√ß√£o: {$proposicao->tipoProposicao->nome}\n";
    echo "Template universal habilitado: " . ($deveUsarUniversal ? 'SIM' : 'N√ÉO') . "\n";
} else {
    echo "‚ö†Ô∏è Tipo de proposi√ß√£o n√£o encontrado\n";
}

echo "\n=== RESULTADO FINAL ===\n";

if ($temArquivoSalvo) {
    echo "üöÄ OTIMIZA√á√ÉO ATIVA:\n";
    echo "   ‚úÖ Legislativo carregar√° INSTANTANEAMENTE\n";  
    echo "   ‚úÖ Usar√° arquivo com acentua√ß√£o j√° corrigida\n";
    echo "   ‚úÖ Evita processamento desnecess√°rio do template\n";
    echo "   ‚úÖ Performance otimizada\n";
} else {
    echo "‚ö†Ô∏è OTIMIZA√á√ÉO N√ÉO APLIC√ÅVEL:\n";
    echo "   - Proposi√ß√£o n√£o tem arquivo salvo\n";
    echo "   - Usar√° template universal (normal)\n";
    echo "   - Performance conforme esperado\n";
}

echo "\n";