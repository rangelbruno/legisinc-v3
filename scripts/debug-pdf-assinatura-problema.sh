#!/bin/bash

echo "üîç DIAGN√ìSTICO COMPLETO: PDF de Assinatura da Proposi√ß√£o 8"
echo "=================================================="

# 1. Verificar se arquivo DOCX existe e est√° acess√≠vel
echo ""
echo "1. ARQUIVO DOCX ORIGINAL (editado pelo OnlyOffice)"
echo "---------------------------------------------------"
DOCX_PATH="/home/bruno/legisinc/storage/app/private/proposicoes/proposicao_8_1755736247.docx"
if [ -f "$DOCX_PATH" ]; then
    echo "‚úÖ Arquivo DOCX encontrado: $DOCX_PATH"
    echo "   üìè Tamanho: $(stat -c%s "$DOCX_PATH") bytes"
    echo "   üìÖ Modificado: $(stat -c%y "$DOCX_PATH")"
    
    # Extrair texto simples do DOCX para verificar conte√∫do
    echo ""
    echo "üìÑ Conte√∫do do DOCX (primeiros 500 caracteres):"
    echo "------------------------------------------------"
    if command -v unzip &> /dev/null && command -v xml2 &> /dev/null; then
        unzip -q -o "$DOCX_PATH" word/document.xml -d /tmp/
        if [ -f "/tmp/word/document.xml" ]; then
            # Extrair texto XML e limpar tags
            cat /tmp/word/document.xml | sed 's/<[^>]*>//g' | head -c 500
            echo ""
            rm -f /tmp/word/document.xml
        else
            echo "‚ùå Erro: N√£o foi poss√≠vel extrair document.xml do DOCX"
        fi
    elif command -v unzip &> /dev/null; then
        # M√©todo alternativo sem xml2
        unzip -q -o "$DOCX_PATH" word/document.xml -d /tmp/
        if [ -f "/tmp/word/document.xml" ]; then
            # Extrair texto b√°sico removendo tags XML
            grep -o '>[^<]*<' /tmp/word/document.xml | sed 's/[><]//g' | head -c 500
            echo ""
            rm -f /tmp/word/document.xml
        else
            echo "‚ùå Erro: N√£o foi poss√≠vel extrair document.xml do DOCX"
        fi
    else
        echo "‚ö†Ô∏è  unzip n√£o dispon√≠vel - n√£o √© poss√≠vel extrair conte√∫do do DOCX"
    fi
else
    echo "‚ùå Arquivo DOCX N√ÉO encontrado: $DOCX_PATH"
fi

# 2. Verificar PDFs gerados
echo ""
echo "2. PDFs GERADOS"
echo "---------------"

# PDF de assinatura
PDF_ASSINATURA="/home/bruno/legisinc/storage/app/proposicoes/pdfs/8/proposicao_8_assinatura_1755736420.pdf"
if [ -f "$PDF_ASSINATURA" ]; then
    echo "‚úÖ PDF de Assinatura: $PDF_ASSINATURA"
    echo "   üìè Tamanho: $(stat -c%s "$PDF_ASSINATURA") bytes"
    echo "   üìÖ Criado: $(stat -c%y "$PDF_ASSINATURA")"
else
    echo "‚ùå PDF de Assinatura N√ÉO encontrado: $PDF_ASSINATURA"
fi

# PDF do OnlyOffice
PDF_ONLYOFFICE="/home/bruno/legisinc/storage/app/private/proposicoes/pdfs/8/proposicao_8_onlyoffice_1755736422.pdf"
if [ -f "$PDF_ONLYOFFICE" ]; then
    echo "‚úÖ PDF OnlyOffice: $PDF_ONLYOFFICE"
    echo "   üìè Tamanho: $(stat -c%s "$PDF_ONLYOFFICE") bytes"
    echo "   üìÖ Criado: $(stat -c%y "$PDF_ONLYOFFICE")"
else
    echo "‚ùå PDF OnlyOffice N√ÉO encontrado: $PDF_ONLYOFFICE"
fi

# 3. Testar extra√ß√£o de texto dos PDFs
echo ""
echo "3. CONTE√öDO DOS PDFs (usando pdftotext se dispon√≠vel)"
echo "----------------------------------------------------"

if command -v pdftotext &> /dev/null; then
    if [ -f "$PDF_ASSINATURA" ]; then
        echo ""
        echo "üìÑ Conte√∫do do PDF de Assinatura (primeiros 500 chars):"
        echo "-------------------------------------------------------"
        pdftotext "$PDF_ASSINATURA" - | head -c 500
        echo ""
    fi
    
    if [ -f "$PDF_ONLYOFFICE" ]; then
        echo ""
        echo "üìÑ Conte√∫do do PDF OnlyOffice (primeiros 500 chars):"
        echo "----------------------------------------------------"
        pdftotext "$PDF_ONLYOFFICE" - | head -c 500
        echo ""
    fi
else
    echo "‚ö†Ô∏è  pdftotext n√£o dispon√≠vel - instalar com: sudo apt install poppler-utils"
fi

# 4. Verificar logs recentes relacionados √† proposi√ß√£o 8
echo ""
echo "4. LOGS RECENTES (√∫ltimas 20 linhas relacionadas √† proposi√ß√£o 8)"
echo "----------------------------------------------------------------"
if [ -f "/home/bruno/legisinc/storage/logs/laravel.log" ]; then
    grep "proposicao.*8\|Proposi√ß√£o.*8" /home/bruno/legisinc/storage/logs/laravel.log | tail -20
else
    echo "‚ùå Arquivo de log n√£o encontrado"
fi

# 5. Verificar se OnlyOffice est√° rodando
echo ""
echo "5. STATUS DO ONLYOFFICE"
echo "----------------------"
if docker ps | grep -q onlyoffice; then
    echo "‚úÖ Container OnlyOffice est√° rodando:"
    docker ps | grep onlyoffice
else
    echo "‚ùå Container OnlyOffice N√ÉO est√° rodando"
fi

# 6. Verificar configura√ß√µes de PDF do Laravel
echo ""
echo "6. CONFIGURA√á√ÉO DOMPDF (Laravel)"
echo "--------------------------------"
if [ -f "/home/bruno/legisinc/config/dompdf.php" ]; then
    echo "‚úÖ Arquivo de configura√ß√£o DomPDF encontrado"
    echo "Configura√ß√µes principais:"
    grep -E "default_font|enable_remote|enable_font_subsetting" /home/bruno/legisinc/config/dompdf.php
else
    echo "‚ö†Ô∏è  Arquivo config/dompdf.php n√£o encontrado"
fi

echo ""
echo "=================================================="
echo "üéØ DIAGN√ìSTICO CONCLU√çDO"
echo ""

# Resumo das descobertas
echo "üìã RESUMO:"
echo "----------"
if [ -f "$DOCX_PATH" ]; then
    echo "‚úÖ Arquivo DOCX original existe e tem $(stat -c%s "$DOCX_PATH") bytes"
else
    echo "‚ùå Arquivo DOCX original N√ÉO EXISTE - PROBLEMA CR√çTICO"
fi

if [ -f "$PDF_ASSINATURA" ]; then
    SIZE_PDF=$(stat -c%s "$PDF_ASSINATURA")
    if [ "$SIZE_PDF" -gt 1000 ]; then
        echo "‚úÖ PDF de assinatura existe e tem tamanho adequado ($SIZE_PDF bytes)"
    else
        echo "‚ö†Ô∏è  PDF de assinatura muito pequeno ($SIZE_PDF bytes) - pode estar vazio"
    fi
else
    echo "‚ùå PDF de assinatura N√ÉO EXISTE"
fi

echo ""
echo "üîß PR√ìXIMOS PASSOS:"
echo "-------------------"
echo "1. Se DOCX existe mas PDF tem problemas ‚Üí Verificar ProposicaoAssinaturaController"
echo "2. Se DOCX n√£o existe ‚Üí Verificar OnlyOffice callback e salvamento"
echo "3. Se ambos existem ‚Üí Verificar se controller est√° usando arquivo correto"
echo "4. Verificar se h√° problema na convers√£o DOCX ‚Üí PDF"