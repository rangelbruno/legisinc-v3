#!/bin/bash

echo "üß™ TESTE FINAL: Verificando corre√ß√£o do PDF de assinatura"
echo "=========================================================="

echo ""
echo "üìã STATUS PR√â-TESTE:"
echo "--------------------"

# Verificar se servidor est√° rodando
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/ | grep -q "200"; then
    echo "‚úÖ Servidor Laravel rodando em http://localhost:8001"
else
    echo "‚ùå Servidor Laravel n√£o est√° respondendo"
    echo "   üí° Execute: docker-compose up -d"
    exit 1
fi

# Verificar se corre√ß√£o foi aplicada
if grep -q "processingLock\|Execu√ß√£o duplicada detectada" /home/bruno/legisinc/app/Http/Controllers/ProposicaoAssinaturaController.php; then
    echo "‚úÖ Corre√ß√£o anti-duplica√ß√£o aplicada"
else
    echo "‚ùå Corre√ß√£o anti-duplica√ß√£o N√ÉO aplicada"
fi

# Verificar se arquivos necess√°rios existem
DOCX_FILE="/home/bruno/legisinc/storage/app/private/proposicoes/proposicao_8_1755736247.docx"
if [ -f "$DOCX_FILE" ]; then
    echo "‚úÖ Arquivo DOCX editado existe ($(stat -c%s "$DOCX_FILE") bytes)"
else
    echo "‚ùå Arquivo DOCX editado N√ÉO existe"
fi

echo ""
echo "üîß TESTANDO GERA√á√ÉO DE PDF:"
echo "---------------------------"

# Simular acesso √† tela de assinatura
echo "1. Testando endpoint de assinatura..."

# Fazer requisi√ß√£o para trigger gera√ß√£o do PDF
response=$(curl -s -o /dev/null -w "%{http_code}" -L "http://localhost:8001/proposicoes/8/assinar" 2>/dev/null)

case $response in
    "200")
        echo "   ‚úÖ P√°gina carregou (j√° logado ou p√∫blico)"
        ;;
    "302")
        echo "   ‚úÖ Redirecionamento para login (comportamento normal)"
        ;;
    "404")
        echo "   ‚ùå P√°gina n√£o encontrada (rota n√£o existe)"
        ;;
    "500")
        echo "   ‚ùå Erro interno do servidor"
        echo "   üí° Verifique logs: tail /home/bruno/legisinc/storage/logs/laravel.log"
        ;;
    *)
        echo "   ‚ùì Resposta inesperada: HTTP $response"
        ;;
esac

echo ""
echo "2. Verificando PDFs gerados ap√≥s corre√ß√£o..."

# Procurar novos PDFs gerados
NEW_PDFS=($(find /home/bruno/legisinc/storage/app -name "*proposicao_8*pdf" -newer /home/bruno/legisinc/scripts/corrigir-pdf-assinatura.sh 2>/dev/null))

if [ ${#NEW_PDFS[@]} -gt 0 ]; then
    echo "   ‚úÖ Novos PDFs gerados ap√≥s corre√ß√£o:"
    for pdf in "${NEW_PDFS[@]}"; do
        size=$(stat -c%s "$pdf")
        modified=$(stat -c%y "$pdf")
        echo "      üìÑ $pdf ($size bytes - $modified)"
    done
    
    # Testar o PDF mais recente
    LATEST_PDF="${NEW_PDFS[0]}"
    echo ""
    echo "   üîç Analisando PDF mais recente: $(basename "$LATEST_PDF")"
    
    if [ "$size" -gt 1000 ]; then
        echo "      ‚úÖ Tamanho adequado ($size bytes)"
    else
        echo "      ‚ö†Ô∏è  Tamanho suspeito ($size bytes - pode estar vazio)"
    fi
    
else
    echo "   ‚ùå Nenhum PDF novo gerado ap√≥s corre√ß√£o"
    echo "   üí° Pode ser que ainda n√£o foi acessado ou h√° erro"
fi

echo ""
echo "3. Verificando logs recentes..."

echo "   üìã Logs de PDF Assinatura (√∫ltimas 10 linhas):"
if [ -f "/home/bruno/legisinc/storage/logs/laravel.log" ]; then
    grep "PDF Assinatura" /home/bruno/legisinc/storage/logs/laravel.log | tail -10 | while read line; do
        echo "      $line"
    done
else
    echo "      ‚ùå Log n√£o encontrado"
fi

echo ""
echo "   üìã Logs sobre execu√ß√£o duplicada:"
if grep -q "Execu√ß√£o duplicada detectada" /home/bruno/legisinc/storage/logs/laravel.log; then
    echo "      ‚úÖ Sistema detectou e preveniu execu√ß√£o duplicada:"
    grep "Execu√ß√£o duplicada detectada" /home/bruno/legisinc/storage/logs/laravel.log | tail -5 | while read line; do
        echo "         $line"
    done
else
    echo "      ‚úÖ Nenhuma execu√ß√£o duplicada detectada (bom sinal)"
fi

echo ""
echo "4. Verificando todos os PDFs existentes da proposi√ß√£o 8..."

echo "   üìä Todos os PDFs da proposi√ß√£o 8:"
ALL_PDFS=($(find /home/bruno/legisinc/storage/app -name "*proposicao_8*pdf" 2>/dev/null))

if [ ${#ALL_PDFS[@]} -gt 0 ]; then
    for pdf in "${ALL_PDFS[@]}"; do
        size=$(stat -c%s "$pdf")
        modified=$(stat -c%y "$pdf")
        echo "      üìÑ $(basename "$pdf")"
        echo "         üíæ $size bytes"
        echo "         üìÖ $modified"
        echo "         üìÅ $pdf"
        echo ""
    done
else
    echo "      ‚ùå Nenhum PDF encontrado para proposi√ß√£o 8"
fi

echo ""
echo "üéØ RESULTADO DO TESTE:"
echo "====================="

# Verificar se h√° PDF recente com tamanho adequado
RECENT_GOOD_PDF=""
for pdf in "${ALL_PDFS[@]}"; do
    size=$(stat -c%s "$pdf")
    if [ "$size" -gt 10000 ]; then  # Pelo menos 10KB
        RECENT_GOOD_PDF="$pdf"
        break
    fi
done

if [ -n "$RECENT_GOOD_PDF" ]; then
    echo "‚úÖ SUCESSO: PDF com tamanho adequado encontrado"
    echo "   üìÑ Arquivo: $(basename "$RECENT_GOOD_PDF")"
    echo "   üíæ Tamanho: $(stat -c%s "$RECENT_GOOD_PDF") bytes"
    echo "   üìÖ Modificado: $(stat -c%y "$RECENT_GOOD_PDF")"
    echo ""
    echo "üß™ TESTE MANUAL RECOMENDADO:"
    echo "----------------------------"
    echo "1. Abra o navegador em: http://localhost:8001/login"
    echo "2. Fa√ßa login com: jessica@sistema.gov.br / 123456"
    echo "3. Acesse: http://localhost:8001/proposicoes/8/assinar"
    echo "4. Verifique se o PDF exibe:"
    echo "   ‚Ä¢ Ementa: 'Editado pelo Parlamentar'"
    echo "   ‚Ä¢ Texto: 'Bruno, sua oportunidade chegou!'"
    echo "   ‚Ä¢ N√∫mero: '[AGUARDANDO PROTOCOLO]'"
    echo ""
    echo "‚úÖ Se cont√©m esses elementos: PROBLEMA RESOLVIDO!"
    echo "‚ùå Se N√ÉO cont√©m: Problema persiste"
    
else
    echo "‚ùå PROBLEMA PERSISTE: Nenhum PDF adequado encontrado"
    echo ""
    echo "üîß PR√ìXIMOS PASSOS:"
    echo "------------------"
    echo "1. Verificar logs detalhadamente"
    echo "2. Testar acesso manual √† tela de assinatura"
    echo "3. Verificar se h√° erros na extra√ß√£o DOCX ‚Üí PDF"
    echo "4. Verificar permiss√µes de arquivos"
fi

echo ""
echo "üí° COMANDOS √öTEIS PARA DEBUG:"
echo "=============================="
echo "# Monitorar logs em tempo real:"
echo "tail -f /home/bruno/legisinc/storage/logs/laravel.log | grep -E 'PDF|proposicao.*8|Assinatura'"
echo ""
echo "# For√ßar regenera√ß√£o removendo PDFs:"
echo "find /home/bruno/legisinc/storage/app -name '*proposicao_8*pdf' -delete"
echo ""
echo "# Verificar processo de convers√£o manual:"
echo "docker exec -it legisinc-app php -r \"echo 'LibreOffice dispon√≠vel: ' . (shell_exec('which libreoffice') ? 'SIM' : 'N√ÉO') . PHP_EOL;\""