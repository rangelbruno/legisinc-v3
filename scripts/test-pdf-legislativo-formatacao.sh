#!/bin/bash

echo "üß™ TESTANDO PDF COM FORMATA√á√ÉO DO LEGISLATIVO"
echo "============================================="

echo ""
echo "üîç 1. Verificando arquivo mais recente da proposi√ß√£o 2..."

arquivo_mais_recente=$(ls -t /home/bruno/legisinc/storage/app/private/proposicoes/proposicao_2_*.docx 2>/dev/null | head -1)

if [ -n "$arquivo_mais_recente" ]; then
    echo "   ‚úÖ Arquivo mais recente encontrado: $arquivo_mais_recente"
    
    # Extrair informa√ß√µes do arquivo
    modificacao=$(stat -c %y "$arquivo_mais_recente")
    tamanho=$(stat -c %s "$arquivo_mais_recente")
    
    echo "   üìÖ Modificado em: $modificacao"
    echo "   üìè Tamanho: $tamanho bytes"
    
    # Verificar se arquivo n√£o est√° vazio
    if [ $tamanho -gt 10000 ]; then
        echo "   ‚úÖ Arquivo parece v√°lido (tamanho adequado)"
    else
        echo "   ‚ö†Ô∏è Arquivo muito pequeno - pode estar corrompido"
    fi
else
    echo "   ‚ùå Nenhum arquivo encontrado para proposi√ß√£o 2"
fi

echo ""
echo "üîß 2. Verificando corre√ß√µes no controller..."

controller_file="/home/bruno/legisinc/app/Http/Controllers/ProposicaoAssinaturaController.php"

if [ -f "$controller_file" ]; then
    echo "   ‚úÖ Controller encontrado"
    
    # Verificar se tem a nova l√≥gica de preserva√ß√£o
    if grep -q "PDF OnlyOffice LEGISLATIVO" "$controller_file"; then
        echo "   ‚úÖ Nova l√≥gica de preserva√ß√£o do Legislativo implementada"
    else
        echo "   ‚ùå Nova l√≥gica de preserva√ß√£o n√£o encontrada"
    fi
    
    # Verificar extra√ß√£o melhorada de DOCX
    if grep -q "w:rPr" "$controller_file"; then
        echo "   ‚úÖ Extra√ß√£o melhorada de formata√ß√£o DOCX implementada"
    else
        echo "   ‚ùå Extra√ß√£o melhorada de formata√ß√£o n√£o encontrada"
    fi
    
    # Verificar CSS melhorado
    if grep -q "text-center" "$controller_file"; then
        echo "   ‚úÖ CSS preserva√ß√£o de alinhamentos implementado"
    else
        echo "   ‚ùå CSS preserva√ß√£o de alinhamentos n√£o encontrado"
    fi
    
    # Verificar formata√ß√£o de texto
    if grep -q "strong>" "$controller_file"; then
        echo "   ‚úÖ Preserva√ß√£o de formata√ß√£o bold/italic implementada"
    else
        echo "   ‚ùå Preserva√ß√£o de formata√ß√£o bold/italic n√£o encontrada"
    fi
    
else
    echo "   ‚ùå Controller n√£o encontrado"
fi

echo ""
echo "üåê 3. Testando acesso √† p√°gina de assinatura..."

# Fazer request para a p√°gina
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/proposicoes/2/assinar)

if [ "$response" = "200" ]; then
    echo "   ‚úÖ P√°gina de assinatura acess√≠vel (200 OK)"
elif [ "$response" = "302" ]; then
    echo "   üîÑ Redirecionamento para login (302) - esperado sem autentica√ß√£o"
else
    echo "   ‚ùå Erro ao acessar p√°gina: HTTP $response"
fi

echo ""
echo "üìÑ 4. Simulando teste de extra√ß√£o do arquivo mais recente..."

if [ -n "$arquivo_mais_recente" ]; then
    echo "   üîç Tentando extrair primeiras palavras do arquivo:"
    
    # Usar unzip para extrair o document.xml temporariamente
    temp_dir=$(mktemp -d)
    if unzip -q "$arquivo_mais_recente" word/document.xml -d "$temp_dir" 2>/dev/null; then
        # Extrair algumas palavras do XML (simplificado)
        words=$(grep -o '<w:t[^>]*>[^<]*</w:t>' "$temp_dir/word/document.xml" | head -10 | sed 's/<[^>]*>//g')
        if [ -n "$words" ]; then
            echo "   ‚úÖ Conte√∫do encontrado no arquivo:"
            echo "$words" | head -3
        else
            echo "   ‚ö†Ô∏è Nenhum texto encontrado no arquivo"
        fi
        rm -rf "$temp_dir"
    else
        echo "   ‚ùå Erro ao extrair conte√∫do do arquivo DOCX"
    fi
fi

echo ""
echo "üéØ 5. RESULTADO DO TESTE"
echo "======================="

total_checks=6
passed_checks=0

# Contar verifica√ß√µes que passaram
if [ -n "$arquivo_mais_recente" ]; then
    passed_checks=$((passed_checks + 1))
fi

if grep -q "PDF OnlyOffice LEGISLATIVO" "$controller_file" 2>/dev/null; then
    passed_checks=$((passed_checks + 1))
fi

if grep -q "w:rPr" "$controller_file" 2>/dev/null; then
    passed_checks=$((passed_checks + 1))
fi

if grep -q "text-center" "$controller_file" 2>/dev/null; then
    passed_checks=$((passed_checks + 1))
fi

if grep -q "strong>" "$controller_file" 2>/dev/null; then
    passed_checks=$((passed_checks + 1))
fi

if [ "$response" = "200" ] || [ "$response" = "302" ]; then
    passed_checks=$((passed_checks + 1))
fi

percentual=$((passed_checks * 100 / total_checks))

echo "üìä Verifica√ß√µes passaram: $passed_checks/$total_checks ($percentual%)"

if [ $percentual -eq 100 ]; then
    echo "üéâ RESULTADO: TODAS AS CORRE√á√ïES APLICADAS COM SUCESSO!"
    echo "‚úÖ O PDF de assinatura agora deve refletir a formata√ß√£o do Legislativo"
elif [ $percentual -ge 80 ]; then
    echo "üü° RESULTADO: MAIORIA DAS CORRE√á√ïES APLICADAS ($percentual%)"
    echo "‚ö†Ô∏è Algumas verifica√ß√µes falharam - revisar manualmente"
else
    echo "üî¥ RESULTADO: MUITAS CORRE√á√ïES FALHARAM ($percentual%)"
    echo "‚ùå Revis√£o manual necess√°ria"
fi

echo ""
echo "üîó TESTE MANUAL RECOMENDADO:"
echo "   1. Acesse: http://localhost:8001/login"
echo "   2. Login: jessica@sistema.gov.br / 123456"
echo "   3. V√° para: http://localhost:8001/proposicoes/2/assinar"
echo "   4. Clique na aba 'PDF'"
echo "   5. Verifique se v√™:"
echo "      - Imagem do cabe√ßalho no topo"
echo "      - Formata√ß√£o feita pelo Legislativo preservada"
echo "      - Textos em negrito/it√°lico mantidos"
echo "      - Alinhamentos centralizados preservados"
echo "      - Rodap√© conforme editado pelo Legislativo"
echo ""
echo "=============================================="
echo "‚úÖ Teste de formata√ß√£o do Legislativo conclu√≠do!"