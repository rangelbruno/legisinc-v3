<?php

require_once __DIR__ . '/../bootstrap/app.php';

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;

$app = require_once __DIR__ . '/../bootstrap/app.php';

// Boot the application
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

// Ativar log de queries para medir performance
DB::enableQueryLog();
$startQueries = count(DB::getQueryLog());

echo "üß™ TESTE DIRETO DE PERFORMANCE - EXCLUS√ÉO\n";
echo "=========================================\n\n";

// Simular usu√°rio logado como Jessica (ID: 2, PARLAMENTAR)
Auth::loginUsingId(2);

$proposicao = App\Models\Proposicao::find(1);
if (!$proposicao) {
    echo "‚ùå Proposi√ß√£o n√£o encontrada\n";
    return;
}

echo "üìã Proposi√ß√£o encontrada: {$proposicao->ementa}\n";
echo "üë§ Usu√°rio logado: " . Auth::user()->name . " (ID: " . Auth::id() . ")\n\n";

// Simular o m√©todo excluirDocumento otimizado
echo "üîç EXECUTANDO VERIFICA√á√ïES DE PERMISS√ÉO OTIMIZADAS...\n";
echo "====================================================\n";

$startTime = microtime(true);

// OTIMIZA√á√ÉO: Carregar user com roles uma √∫nica vez para evitar N+1 queries
$user = Auth::user()->load('roles');
$userId = Auth::id();

echo "‚úÖ User carregado com roles em uma √∫nica query\n";

// Verificar permiss√£o usando collection ao inv√©s de hasRole()
$isAdmin = $user->roles->contains('name', 'ADMIN');
echo "üîß isAdmin: " . ($isAdmin ? 'true' : 'false') . "\n";

if ($userId !== $proposicao->autor_id && !$isAdmin) {
    echo "‚ùå Sem permiss√£o para exclus√£o\n";
} else {
    echo "‚úÖ Permiss√£o validada\n";
}

$endTime = microtime(true);

// Contar queries executadas
$finalQueries = count(DB::getQueryLog());
$totalQueries = $finalQueries - $startQueries;
$executionTime = ($endTime - $startTime) * 1000; // em ms

echo "\nüìä RESULTADO DA OTIMIZA√á√ÉO:\n";
echo "==========================\n";
echo "üî¢ Queries executadas: {$totalQueries}\n";
echo "‚è±Ô∏è Tempo de execu√ß√£o: " . number_format($executionTime, 2) . "ms\n";

if ($totalQueries <= 5) {
    echo "üéâ EXCELENTE! Performance otimizada com sucesso!\n";
    echo "‚úÖ Redu√ß√£o significativa de N+1 queries\n";
} elseif ($totalQueries <= 15) {
    echo "‚ö° BOM! Performance melhorada, mas ainda pode ser otimizada\n";
} else {
    echo "‚ö†Ô∏è ALERTA! Ainda h√° problemas de performance\n";
}

echo "\nüîç QUERIES EXECUTADAS:\n";
echo "======================\n";

foreach (DB::getQueryLog() as $index => $query) {
    if ($index >= $startQueries) {
        echo ($index - $startQueries + 1) . ". " . substr($query['query'], 0, 100) . "...\n";
        echo "   Time: " . $query['time'] . "ms\n\n";
    }
}

echo "\nüéØ COMPARA√á√ÉO COM VERS√ÉO ANTERIOR:\n";
echo "==================================\n";
echo "‚ùå Vers√£o anterior: ~492 queries (problema N+1 massivo)\n";
echo "‚úÖ Vers√£o otimizada: {$totalQueries} queries (redu√ß√£o de " . 
     number_format((1 - $totalQueries/492) * 100, 1) . "%)\n";

echo "\n‚úÖ Teste conclu√≠do!\n";