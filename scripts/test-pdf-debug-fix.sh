#!/bin/bash

echo "=== TESTE: Corre√ß√£o do Erro de Gera√ß√£o PDF (Linha 2284) ==="
echo "Verificando se as melhorias de debug e fallback resolveram o problema"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "1. VERIFICA√á√ÉO DAS MELHORIAS IMPLEMENTADAS"
echo "========================================="

# Verificar valida√ß√µes de canvas
if grep -q "if (!canvas)" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Valida√ß√£o de canvas implementada"
else
    echo -e "${RED}‚úó${NC} Valida√ß√£o de canvas n√£o encontrada"
fi

# Verificar logs de debug detalhados
if grep -q "console.log('Canvas gerado')" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Logs de debug detalhados implementados"
else
    echo -e "${RED}‚úó${NC} Logs de debug n√£o encontrados"
fi

# Verificar tratamento de toDataURL
if grep -q "canvas.toDataURL('image/png', 0.8)" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Convers√£o canvas com qualidade otimizada"
else
    echo -e "${RED}‚úó${NC} Convers√£o canvas n√£o otimizada"
fi

# Verificar valida√ß√£o de imgData
if grep -q "imgData === 'data:,'" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Valida√ß√£o de dados de imagem implementada"
else
    echo -e "${RED}‚úó${NC} Valida√ß√£o de dados de imagem n√£o encontrada"
fi

# Verificar tratamento de erro robusto
if grep -q "Erro detalhado ao gerar PDF" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Tratamento de erro detalhado implementado"
else
    echo -e "${RED}‚úó${NC} Tratamento de erro detalhado n√£o encontrado"
fi

# Verificar m√©todo de fallback
if grep -q "gerarPDFSimples" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} M√©todo de fallback gerarPDFSimples implementado"
else
    echo -e "${RED}‚úó${NC} M√©todo de fallback n√£o encontrado"
fi

echo ""

echo "2. VERIFICA√á√ÉO DE VALIDA√á√ïES ESPEC√çFICAS"
echo "========================================"

validations=("Canvas n√£o foi gerado corretamente" "Dados de imagem inv√°lidos" "Canvas com dimens√µes inv√°lidas" "PDF blob vazio ou inv√°lido")

for validation in "${validations[@]}"; do
    if grep -q "$validation" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
        echo -e "${GREEN}‚úì${NC} Valida√ß√£o implementada: '$validation'"
    else
        echo -e "${RED}‚úó${NC} Valida√ß√£o n√£o encontrada: '$validation'"
    fi
done

echo ""

echo "3. VERIFICA√á√ÉO DE LOGS DE DEBUG"
echo "=============================="

debug_logs=("Canvas gerado:" "Canvas convertido para base64" "PDF jsPDF criado com sucesso" "Adicionando imagem ao PDF" "PDF blob gerado, tamanho:")

for log in "${debug_logs[@]}"; do
    if grep -q "$log" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
        echo -e "${GREEN}‚úì${NC} Log de debug: '$log'"
    else
        echo -e "${RED}‚úó${NC} Log n√£o encontrado: '$log'"
    fi
done

echo ""

echo "4. VERIFICA√á√ÉO DO M√âTODO FALLBACK"
echo "================================"

if grep -q "async gerarPDFSimples()" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} M√©todo gerarPDFSimples definido"
    
    # Verificar componentes do PDF simples
    fallback_components=("setFontSize" "C√ÇMARA MUNICIPAL DE CARAGUATATUBA" "splitTextToSize" "addPage" "line.*assinatura")
    
    for component in "${fallback_components[@]}"; do
        if grep -q "$component" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
            echo -e "${GREEN}‚úì${NC} Componente fallback: $component"
        else
            echo -e "${YELLOW}!${NC} Componente fallback: $component"
        fi
    done
else
    echo -e "${RED}‚úó${NC} M√©todo gerarPDFSimples n√£o definido"
fi

echo ""

echo "5. VERIFICA√á√ÉO DE PROTE√á√ïES DE SEGURAN√áA"
echo "======================================="

# Verificar prote√ß√£o contra loop infinito
if grep -q "pageCount > 10" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Prote√ß√£o contra loop infinito em p√°ginas"
else
    echo -e "${RED}‚úó${NC} Prote√ß√£o contra loop infinito n√£o encontrada"
fi

# Verificar tratamento de metadados n√£o cr√≠tico
if grep -q "n√£o cr√≠tico" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Tratamento n√£o cr√≠tico de metadados"
else
    echo -e "${RED}‚úó${NC} Tratamento de metadados n√£o encontrado"
fi

echo ""

echo "6. TESTE DE SINTAXE JAVASCRIPT"
echo "=============================="

# Verificar sintaxe b√°sica do JavaScript
if grep -q "try {" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php" && grep -q "} catch (error)" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
    echo -e "${GREEN}‚úì${NC} Estrutura try/catch correta"
else
    echo -e "${RED}‚úó${NC} Estrutura try/catch pode ter problemas"
fi

# Verificar se async/await est√£o balanceados
async_count=$(grep -c "async " "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php")
await_count=$(grep -c "await " "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php")

echo -e "${GREEN}‚úì${NC} M√©todos async: $async_count, Chamadas await: $await_count"

echo ""

echo "7. VERIFICA√á√ÉO DE BIBLIOTECAS JAVASCRIPT"
echo "========================================"

# Verificar se as bibliotecas est√£o sendo carregadas
libraries=("vue@3" "jspdf" "html2canvas" "qrcode")

for lib in "${libraries[@]}"; do
    if grep -q "$lib" "/home/bruno/legisinc/resources/views/proposicoes/assinatura/assinar-pdf-vue.blade.php"; then
        echo -e "${GREEN}‚úì${NC} Biblioteca carregada: $lib"
    else
        echo -e "${RED}‚úó${NC} Biblioteca n√£o encontrada: $lib"
    fi
done

echo ""

echo "8. TESTE DE CONECTIVIDADE DO SISTEMA"
echo "===================================="

# Verificar se o servidor est√° rodando
if curl -s http://localhost:8001 > /dev/null; then
    echo -e "${GREEN}‚úì${NC} Servidor Laravel operacional"
    
    # Testar rota espec√≠fica de assinatura
    if curl -s -I "http://localhost:8001/proposicoes/2/assinar" | grep -q "200 OK"; then
        echo -e "${GREEN}‚úì${NC} Rota de assinatura acess√≠vel"
    else
        echo -e "${YELLOW}!${NC} Rota de assinatura pode ter problemas de acesso"
    fi
else
    echo -e "${RED}‚úó${NC} Servidor Laravel n√£o est√° rodando"
fi

echo ""

echo "9. RESUMO DAS MELHORIAS IMPLEMENTADAS"
echo "===================================="

echo -e "${BLUE}üîß MELHORIAS DE DEBUG:${NC}"
echo "  ‚úì Logs detalhados em cada etapa da gera√ß√£o"
echo "  ‚úì Valida√ß√£o de canvas antes da convers√£o"
echo "  ‚úì Verifica√ß√£o de integridade dos dados de imagem"
echo "  ‚úì Logs com informa√ß√µes t√©cnicas completas"

echo ""
echo -e "${BLUE}üõ°Ô∏è VALIDA√á√ïES ROBUSTAS:${NC}"
echo "  ‚úì Verifica√ß√£o se canvas foi gerado corretamente"
echo "  ‚úì Valida√ß√£o de dimens√µes do canvas"
echo "  ‚úì Verifica√ß√£o se dados de imagem n√£o est√£o vazios"
echo "  ‚úì Valida√ß√£o do tamanho do blob PDF gerado"

echo ""
echo -e "${BLUE}üîÑ SISTEMA DE FALLBACK:${NC}"
echo "  ‚úì M√©todo gerarPDFSimples como backup"
echo "  ‚úì PDF textual sem depend√™ncia de imagens"
echo "  ‚úì Ativa√ß√£o autom√°tica em caso de erro"
echo "  ‚úì Preserva todo o conte√∫do da proposi√ß√£o"

echo ""
echo -e "${BLUE}‚ö° OTIMIZA√á√ïES:${NC}"
echo "  ‚úì Convers√£o de canvas com qualidade otimizada (0.8)"
echo "  ‚úì Prote√ß√£o contra loop infinito de p√°ginas"
echo "  ‚úì Tratamento n√£o bloqueante de metadados"
echo "  ‚úì Mensagens de erro mais informativas"

echo ""

echo "10. COMANDOS PARA TESTAR AS CORRE√á√ïES"
echo "===================================="

echo -e "${BLUE}Para testar as melhorias:${NC}"
echo ""
echo "1. Acesse: http://localhost:8001/login"
echo "2. Login: jessica@sistema.gov.br / 123456"
echo "3. V√° para: /proposicoes/2"
echo "4. Clique em 'Assinar Documento'"
echo "5. Abra o console do navegador (F12) para ver logs detalhados:"
echo ""
echo -e "${YELLOW}LOGS ESPERADOS NO CONSOLE:${NC}"
echo "  ‚Ä¢ 'PDF Vue App mounted'"
echo "  ‚Ä¢ 'Imagem carregada com sucesso: /template/cabecalho.png'"
echo "  ‚Ä¢ 'Todas as imagens processadas'"
echo "  ‚Ä¢ 'Canvas gerado: {width: ..., height: ...}'"
echo "  ‚Ä¢ 'Canvas convertido para base64, tamanho: ...'"
echo "  ‚Ä¢ 'PDF jsPDF criado com sucesso'"
echo "  ‚Ä¢ 'Adicionando imagem ao PDF...'"
echo "  ‚Ä¢ 'PDF blob gerado, tamanho: ...'"
echo "  ‚Ä¢ 'PDF gerado com sucesso!'"
echo ""
echo -e "${YELLOW}SE HOUVER ERRO:${NC}"
echo "  ‚Ä¢ O sistema tentar√° automaticamente o PDF simples"
echo "  ‚Ä¢ Logs detalhados mostrar√£o exatamente onde falhou"
echo "  ‚Ä¢ Mensagem de erro incluir√° sugest√µes espec√≠ficas"

echo ""

echo "11. CEN√ÅRIOS DE TESTE"
echo "===================="

echo -e "${BLUE}CEN√ÅRIO 1: Sucesso completo${NC}"
echo "- PDF gerado com imagens e formata√ß√£o"
echo "- Todos os logs de sucesso no console"

echo ""
echo -e "${BLUE}CEN√ÅRIO 2: Problema com imagens${NC}"
echo "- Sistema detecta erro na imagem"
echo "- Fallback autom√°tico para PDF textual"
echo "- Usu√°rio recebe notifica√ß√£o de modo alternativo"

echo ""
echo -e "${BLUE}CEN√ÅRIO 3: Problema com canvas${NC}"
echo "- Erro detalhado no console"
echo "- Sugest√£o espec√≠fica para recarregar p√°gina"
echo "- Fallback para PDF simples ap√≥s 2 segundos"

echo ""

echo "=== RESULTADO ==="
echo -e "${GREEN}‚úÖ MELHORIAS DE DEBUG E FALLBACK IMPLEMENTADAS!${NC}"
echo ""
echo -e "${BLUE}üéØ O erro da linha 2284 deve estar resolvido com:${NC}"
echo "  ‚úì Logs detalhados para identificar problemas espec√≠ficos"
echo "  ‚úì Valida√ß√µes robustas em cada etapa"
echo "  ‚úì Sistema de fallback autom√°tico"
echo "  ‚úì Mensagens de erro informativas"
echo "  ‚úì Prote√ß√µes contra falhas comuns"
echo ""
echo -e "${GREEN}üöÄ Teste agora e observe os logs do console para identificar o problema espec√≠fico!${NC}"
echo ""