#!/bin/bash

echo "üîß TESTE ESPEC√çFICO: Simulando gera√ß√£o de PDF para assinatura"
echo "============================================================="

echo ""
echo "üìç PROBLEMA IDENTIFICADO:"
echo "-------------------------"
echo "‚Ä¢ Arquivo DOCX editado pelo OnlyOffice existe: ‚úÖ"
echo "‚Ä¢ Tamanho: 50.615 bytes (adequado)"
echo "‚Ä¢ Localiza√ß√£o: /home/bruno/legisinc/storage/app/private/proposicoes/proposicao_8_1755736247.docx"
echo "‚Ä¢ Conte√∫do do DOCX parece correto (tem ementa e texto do parlamentar)"
echo ""
echo "‚Ä¢ PDF de assinatura foi gerado: ‚úÖ"
echo "‚Ä¢ Tamanho: 29.419 bytes (bem maior que o PDF OnlyOffice de 1.395 bytes)"
echo "‚Ä¢ Mas pode n√£o estar mostrando o conte√∫do correto na tela de assinatura"

echo ""
echo "üîç AN√ÅLISE DO C√ìDIGO ProposicaoAssinaturaController:"
echo "---------------------------------------------------"
echo "Fluxo identificado:"
echo "1. ‚úÖ assinar() chama precisaRegerarPDF()"
echo "2. ‚úÖ gerarPDFParaAssinatura() chama criarPDFDoArquivoMaisRecente()"
echo "3. ‚úÖ criarPDFDoArquivoMaisRecente() chama encontrarArquivoMaisRecente()"
echo "4. ‚ùì encontrarArquivoMaisRecente() retorna o arquivo correto?"
echo "5. ‚ùì O PDF √© gerado com o conte√∫do correto?"

echo ""
echo "üîß VERIFICA√á√ÉO DOS DIRET√ìRIOS DE BUSCA:"
echo "---------------------------------------"

# Listar exatamente o que o m√©todo encontrarArquivoMaisRecente() buscaria
echo "Simulando busca do m√©todo encontrarArquivoMaisRecente() para proposi√ß√£o 8:"
echo ""

# Padr√µes de busca (do c√≥digo original)
PADROES=(
    "proposicao_8_*.docx"
    "proposicao_8_*.rtf"
    "proposicao_8.docx"
    "proposicao_8.rtf"
)

# Diret√≥rios onde buscar (do c√≥digo original)
DIRETORIOS=(
    "/home/bruno/legisinc/storage/app/proposicoes"
    "/home/bruno/legisinc/storage/app/private/proposicoes"
    "/home/bruno/legisinc/storage/app/public/proposicoes"
    "/home/bruno/legisinc/storage/app"
    "/var/www/html/storage/app/proposicoes"
    "/var/www/html/storage/app/private/proposicoes"
)

ARQUIVOS_ENCONTRADOS=()

echo "Buscando em cada diret√≥rio com cada padr√£o:"
for dir in "${DIRETORIOS[@]}"; do
    echo ""
    echo "üìÅ Diret√≥rio: $dir"
    if [ -d "$dir" ]; then
        echo "   ‚úÖ Existe"
        for padrao in "${PADROES[@]}"; do
            echo "   üîç Padr√£o: $padrao"
            # Buscar arquivos com o padr√£o
            arquivos=($(find "$dir" -maxdepth 1 -name "$padrao" 2>/dev/null))
            if [ ${#arquivos[@]} -gt 0 ]; then
                for arquivo in "${arquivos[@]}"; do
                    if [ -f "$arquivo" ]; then
                        mtime=$(stat -c%Y "$arquivo" 2>/dev/null)
                        size=$(stat -c%s "$arquivo" 2>/dev/null)
                        echo "      ‚úÖ ENCONTRADO: $arquivo"
                        echo "         üìè Tamanho: $size bytes"
                        echo "         üìÖ Timestamp: $mtime ($(date -d @$mtime '+%Y-%m-%d %H:%M:%S'))"
                        ARQUIVOS_ENCONTRADOS+=("$mtime:$arquivo:$size")
                    fi
                done
            else
                echo "      ‚ùå Nenhum arquivo encontrado"
            fi
        done
    else
        echo "   ‚ùå N√£o existe"
    fi
done

echo ""
echo "üìä RESUMO DE ARQUIVOS ENCONTRADOS:"
echo "---------------------------------"
if [ ${#ARQUIVOS_ENCONTRADOS[@]} -gt 0 ]; then
    echo "Total encontrados: ${#ARQUIVOS_ENCONTRADOS[@]}"
    echo ""
    
    # Ordenar por timestamp (mais recente primeiro)
    IFS=$'\n' sorted=($(sort -rn <<<"${ARQUIVOS_ENCONTRADOS[*]}"))
    
    echo "Ordena√ß√£o por data (mais recente primeiro):"
    for i in "${!sorted[@]}"; do
        IFS=':' read -r timestamp arquivo size <<< "${sorted[i]}"
        data_formatada=$(date -d @$timestamp '+%Y-%m-%d %H:%M:%S')
        echo "  $((i+1)). $arquivo"
        echo "     üìÖ $data_formatada"
        echo "     üìè $size bytes"
        if [ $i -eq 0 ]; then
            echo "     üèÜ SERIA SELECIONADO (mais recente)"
            ARQUIVO_MAIS_RECENTE="$arquivo"
        fi
        echo ""
    done
else
    echo "‚ùå NENHUM ARQUIVO ENCONTRADO - ISSO √â UM PROBLEMA!"
fi

# Se encontrou arquivo, verificar se √© o correto
if [ -n "$ARQUIVO_MAIS_RECENTE" ]; then
    echo ""
    echo "üéØ ARQUIVO QUE SERIA USADO PARA PDF:"
    echo "-----------------------------------"
    echo "Arquivo: $ARQUIVO_MAIS_RECENTE"
    
    # Verificar se √© o arquivo correto editado pelo OnlyOffice
    if [[ "$ARQUIVO_MAIS_RECENTE" == *"proposicao_8_1755736247.docx"* ]]; then
        echo "‚úÖ CORRETO: √â o arquivo editado pelo OnlyOffice!"
    else
        echo "‚ùå PROBLEMA: N√ÉO √© o arquivo editado pelo OnlyOffice!"
        echo "   Esperado: algum arquivo contendo 'proposicao_8_1755736247.docx'"
        echo "   Encontrado: $ARQUIVO_MAIS_RECENTE"
    fi
    
    # Verificar conte√∫do b√°sico se for DOCX
    if [[ "$ARQUIVO_MAIS_RECENTE" == *.docx ]]; then
        echo ""
        echo "üìÑ VERIFICA√á√ÉO B√ÅSICA DO CONTE√öDO:"
        echo "---------------------------------"
        if command -v unzip &> /dev/null; then
            # Extrair document.xml temporariamente
            TEMP_DIR=$(mktemp -d)
            unzip -q "$ARQUIVO_MAIS_RECENTE" word/document.xml -d "$TEMP_DIR" 2>/dev/null
            if [ -f "$TEMP_DIR/word/document.xml" ]; then
                # Buscar por palavras-chave do conte√∫do editado
                if grep -q "Bruno, sua oportunidade chegou" "$TEMP_DIR/word/document.xml"; then
                    echo "‚úÖ Cont√©m o texto editado pelo parlamentar"
                else
                    echo "‚ùå N√ÉO cont√©m o texto editado pelo parlamentar"
                fi
                
                if grep -q "Editado pelo Parlamentar" "$TEMP_DIR/word/document.xml"; then
                    echo "‚úÖ Cont√©m a ementa editada"
                else
                    echo "‚ùå N√ÉO cont√©m a ementa editada"
                fi
                
                if grep -q "AGUARDANDO PROTOCOLO" "$TEMP_DIR/word/document.xml"; then
                    echo "‚úÖ Cont√©m o n√∫mero de protocolo correto"
                else
                    echo "‚ùå N√ÉO cont√©m o n√∫mero de protocolo"
                fi
                
                rm -rf "$TEMP_DIR"
            else
                echo "‚ö†Ô∏è  N√£o foi poss√≠vel extrair document.xml para verifica√ß√£o"
                rm -rf "$TEMP_DIR"
            fi
        else
            echo "‚ö†Ô∏è  unzip n√£o dispon√≠vel - n√£o √© poss√≠vel verificar conte√∫do"
        fi
    fi
fi

echo ""
echo "üéØ CONCLUS√ÉO:"
echo "============"
if [ -n "$ARQUIVO_MAIS_RECENTE" ] && [[ "$ARQUIVO_MAIS_RECENTE" == *"proposicao_8_1755736247.docx"* ]]; then
    echo "‚úÖ O m√©todo encontrarArquivoMaisRecente() DEVERIA encontrar o arquivo correto"
    echo "‚úÖ O arquivo existe e tem o conte√∫do esperado"
    echo ""
    echo "üîß POSS√çVEIS CAUSAS DO PROBLEMA:"
    echo "--------------------------------"
    echo "1. ‚ùì Bug na convers√£o DOCX ‚Üí PDF (extrairConteudoDOCX n√£o funciona corretamente)"
    echo "2. ‚ùì PDF sendo gerado de template em vez de arquivo editado"
    echo "3. ‚ùì Cache ou problema de timing na gera√ß√£o do PDF"
    echo "4. ‚ùì Problema na exibi√ß√£o do PDF na view (PDF correto mas view n√£o atualizada)"
    echo ""
    echo "üìã PR√ìXIMO PASSO:"
    echo "----------------"
    echo "Testar a tela /proposicoes/8/assinar e verificar EXATAMENTE que conte√∫do est√° sendo exibido"
else
    echo "‚ùå PROBLEMA CR√çTICO: encontrarArquivoMaisRecente() n√£o encontraria o arquivo correto!"
    echo ""
    echo "üîß ISSO EXPLICA O PROBLEMA:"
    echo "--------------------------"
    echo "‚Ä¢ O m√©todo n√£o est√° encontrando o arquivo editado pelo OnlyOffice"
    echo "‚Ä¢ Provavelmente est√° usando template ou arquivo antigo"
    echo "‚Ä¢ Por isso o PDF n√£o reflete as edi√ß√µes do legislativo"
fi